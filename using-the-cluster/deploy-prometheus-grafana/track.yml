challenges:
- assignment: "##\_Playing with the demo application\n\nThe demo application is a\
    \ simulated E-commerce food store application that also exposes some of it's metrics\
    \ (the food store application might take up to an additional minute to be initialized).\n\
    \n### Generating some metrics\n\nThe url for the food store is: http://metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/\n\
    \n![Demo Application Home Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/01-demo-app-home-page.png)\n\
    \n* Once you are able to access the food store application, play around with it,\n\
    try to buy the products you like [Everything here is free ;) ].\n* When you play\
    \ around with the food store, you make the server serve some requests (GET/POST/..),\
    \ <br>\nsome of the metrics for these requests are generated and exposed for Prometheus\
    \ to collect.\n\n### Exposed metrics\nThe exposed metrics can be found here: http://metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/metrics\n\
    \n* This is the endpoint where Prometheus will scrape (collect) metrics from periodically\
    \ and store them on a persistent storage device like a hard drive (Using [OpenShift\
    \ PersistentVolumes](https://docs.openshift.com/container-platform/4.2/storage/understanding-persistent-storage.html#persistent-storage-overview_understanding-persistent-storage)).\n\
    \n![Demo Application Metrics Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/01-demo-app-metrics-page.png)\n\
    \n* If you don't see similar metrics (pictured above) in your environment, try\
    \ to make an order with the ecommerce application to generate a few metrics.\n"
  difficulty: basic
  slug: 1deploy-demo-app
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: '30443'
    title: web-ui
    type: service
  timelimit: '300'
  title: Step 1 - Example of Prometheus metrics being exposed by an application
  type: challenge
- assignment: "\n### Namespace for monitoring\n\nWe have created a [namespace](https://docs.openshift.com/container-platform/4.2/applications/projects/working-with-projects.html)\
    \ called `pad-monitoring` on OpenShift where we will deploy all our monitoring\
    \ applications (Prometheus and Grafana).\n\n* To make sure we are using our namespace\
    \ run the following command: <br>\n```\noc project pad-monitoring\n```\n\n* You\
    \ can also go to the OpenShift console and login to the namespace [there](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com/k8s/cluster/projects/pad-monitoring).\n\
    \n* The credentials to access the OpenShift console are:\n  * **Username:** ``developer``\n\
    \  * **Password:** ``developer``\n\n### Configure Prometheus for our application\n\
    \nIn OpenShift, we use ConfigMaps to manage configurations for our applications\
    \ ([more info](https://docs.openshift.com/container-platform/3.11/dev_guide/configmaps.html#overview)).\n\
    \n* We will use the following ConfigMap to set up our Prometheus instance.\n\n\
    <pre class=\"file\" data-filename=\"~/prometheus-configmap.yaml\" data-target=\"\
    replace\">\napiVersion: template.openshift.io/v1          # Click on 'Copy to\
    \ Editor' --->\nkind: Template\nobjects:\n  - apiVersion: v1          \n    kind:\
    \ ConfigMap\n    metadata:\n      name: prometheus-demo\n      namespace: pad-monitoring\n\
    \    data:     \n      prometheus.yml: |     # Prometheus configuration starts\
    \ below\n        global:                   \n          external_labels:\n    \
    \        monitor: prometheus\n        scrape_configs:\n          - job_name: 'prometheus'\n\
    \n            static_configs:\n              - targets: ['localhost:9090'] # Configure\
    \ Prometheus to scrape itself\n                labels:\n                  group:\
    \ 'prometheus'\n</pre>\n\n* Click on `Copy to Editor` for the above yaml block,\
    \ to copy it to the editor.\nThis will replace all the text in the editor with\
    \ the above yaml text block\n\n* Now we need to edit the ConfigMap for our Prometheus\
    \ deployment, so that Prometheus knows to scrape our demo application for metrics.\n\
    To do that, we need to add the following section:\n\n<pre class=\"file\" data-filename=\"\
    ~/prometheus-configmap.yaml\">\n              - targets: ['metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com']\
    \ # Click on 'Copy to Editor'->\n                labels:\n                  group:\
    \ 'pad'\n</pre>\n\nIn the above yaml block, we have defined a new targets list\
    \ for our Prometheus to collect metrics from.\n\nThis targets list has the hostname\
    \ for our demo application, i.e. `metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com`\n\
    \nBy default Prometheus collects metrics from the `/metrics` http endpoint. ([More\
    \ info](https://prometheus.io/docs/prometheus/latest/configuration/configuration/)\
    \ on Prometheus Configuration)\n\nAbove, you can see that we have added a label\
    \ `group: 'pad'` <br>\nSo all the metrics from our demo application can be\nqueried\
    \ with a singe PromQL query, i.e. `{group=\"pad\"}`\n\nThe ConfigMap file should\
    \ be stored in a file named `prometheus-configmap.yaml`{{open}}, <br>\nwe will\
    \ use it to update our Prometheus instance in the next step.\n\n### Deploy Prometheus\
    \ with new configuration\n\n* Once we have updated the configuration with our\
    \ new target, we can go ahead and update this ConfigMap in our namespace: <br>\n\
    ```\noc process -f ~/prometheus-configmap.yaml | oc apply -f -\n```\n\n* Update\
    \ the Prometheus deployment using the following command: <br>\n```\noc rollout\
    \ latest dc/prometheus-demo -n pad-monitoring\n```\n\nAfter this, it might take\
    \ a couple minutes for the Prometheus server to be ready to take requests.\n\n\
    The Prometheus Console should be available [here](http://prometheus-demo-route-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com)\n\
    \nYou can also use the [OpenShift dashboard](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com/k8s/ns/pad-monitoring/deploymentconfigs/prometheus-demo)\
    \ to check on the Prometheus deployment.\n\n* The credentials to access the OpenShift\
    \ console are:\n  * **Username:** ``developer``\n  * **Password:** ``developer``\n\
    \n### Check if the configuration was updated successfully\nOnce the Prometheus\
    \ server is ready to take requests, <br>\n* Visit the targets page for Prometheus,\
    \ [here](http://prometheus-demo-route-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/targets).\
    \ <br>\n  The targets page should show you a list of targets that Prometheus has\
    \ been configured to collect metrics from.\n\nIt should look something like:\n\
    ![Prometheus Targets Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/02-prometheus-targets-page.png)\n\
    \n* If you cannot find the demo application, in the targets list, <br>\nTry to\
    \ fix your Prometheus configuration in the ConfigMap file `prometheus-configmap.yaml`{{open}}\
    \ and repeat the previous step.\n\n### Check application metrics\n* Once Prometheus\
    \ is deployed, you can click [here](http://prometheus-demo-route-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/graph?g0.range_input=1h&g0.expr={group%3D\"\
    pad\"}) to see all the metrics for the demo application.\n  This should query\
    \ the Prometheus instance for all the metrics with the label `group=\"pad\"`.\n\
    \n* To learn more about the Prometheus query language or PromQL you can visit\
    \ [this page](https://prometheus.io/docs/prometheus/latest/querying/basics/#querying-prometheus).\n"
  difficulty: basic
  slug: 2deploy-prometheus
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: '30443'
    title: web-ui
    type: service
  timelimit: '300'
  title: Step 2 - Deploying Prometheus to collect exposed metrics
  type: challenge
- assignment: "\n\n## Setting up Grafana to visualize metrics\n\nNow, we will deploy\
    \ Grafana and connect it to our Prometheus instance, so we are able to visualize\
    \ metrics better.\n\n### Deploying Grafana\n\n* We can directly deploy the official\
    \ [container image](https://hub.docker.com/r/grafana/grafana/) for Grafana using\
    \ the following command: <br>\n```\noc new-app grafana/grafana:6.6.1 -n pad-monitoring\n\
    ```\n\n  You should see some output like this:\n\n  ```\n  --> Creating resources\
    \ ...\n      imagestream.image.openshift.io \"grafana\" created\n      deploymentconfig.apps.openshift.io\
    \ \"grafana\" created\n      service \"grafana\" created\n  --> Success\n    \
    \  Application is not exposed. You can expose services to the outside world by\
    \ executing one or more of the commands below:\n       'oc expose svc/grafana'\n\
    \      Run 'oc status' to view your app.\n  ```\n\n* Then we need to expose the\
    \ service so that it is accessible outside of the cluster. <br>\n```\noc expose\
    \ svc/grafana -n pad-monitoring\n```\n\n* In about a minute, the Grafana console\
    \ should be available at: <br>\nhttps://grafana-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com\n\
    \n* You might see a warning like in the image below, this is because we don't\
    \ generate valid ssl certificates for all our routes. You can click on `Advanced...`\
    \ and then click on `Accept the Risk and Continue` to continue to the Grafana\
    \ login page.\n\n  ![Cert Warning Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-cert-warning-page.png)\n\
    \nThe default credentials for Grafana are:\n  * username: `admin`\n  * password:\
    \ `admin`\n\n  ![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-login-page.png)\n\
    \n* Next it will prompt you to change the default credentials, <br>\nyou can safely\
    \ skip this for the purposes of this exercise.  <br>\n![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-password-change-page.png)\n\
    \n* Next you should see the Grafana Welcome page. <br>\n![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-welcome-page.png)\n\
    \n### Configuring Grafana to visualize metrics from Prometheus\n\n* On the Grafana\
    \ Welcome page, click on `Add data source` button to add Prometheus as a data\
    \ source.\n\n* You should see a list of Grafana compatible data source types.\
    \ You can type in `Prometheus` to filter the results. <br>\n![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-add-ds-page.png)\n\
    \n* When you click on the Prometheus Data Source, you should see the Data Source\
    \ settings. <br>\n![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-add-prom-ds-page.png)\n\
    \n  * Fill the URL in the HTTP section with the Prometheus URL: <br>\n`http://prometheus-demo-route-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com`\n\
    \n  * Then click on `Save & Test`, this should test the connection to the Prometheus\
    \ server.\n\nThat's it, the connection between Grafana and Prometheus has been\
    \ configured!\n"
  difficulty: basic
  slug: 3deploy-grafana
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: '30443'
    title: web-ui
    type: service
  timelimit: '300'
  title: Step 3 - Deploying Grafana to visualize Prometheus metrics
  type: challenge
- assignment: "\n\n## Visualizing Metrics using Grafana\n\nNow, we will create a dashboard\
    \ in Grafana and visualize a simple metric from the food store application.\n\n\
    We will visualize a metric called `flask_http_request_total`, it is the total\
    \ number of requests served by the food store application.\n\n### Creating a Dashboard\n\
    \n* Let's start with creating a dashboard for our visualizations.\n\n* In the\
    \ left panel, click on `Create` and then select `Dashboard` <br>\n![Grafana Create\
    \ Dashboard Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/04-grafana-create-dashboard-page.png)\n\
    \n\n### Creating a Panel\n\n* You should see a New Panel like in the picture above.\
    \ Click on `Add Query`.\n\n  You can have multiple panels in a single dashboard,\
    \ and each panel supports different types of visualizations ([more info](https://grafana.com/docs/grafana/latest/guides/getting_started/#all-users)).<br>\n\
    \  But here we will just look at line charts as we are dealing with time-series\
    \ data.\n\n* Below the graphing area, you should have an empty text box for your\
    \ PromQL queries. <br>\nEnter your query `flask_http_request_total`\n![Grafana\
    \ Create Panel Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/04-grafana-create-panel-page.png)\n\
    \n* In the upper right corner, you can change the graphing duration. <br>\nChange\
    \ the duration to `Last 5 minutes`. <br>\n\n  *you can choose any other value\
    \ as well just keep in mind\nthat we have just set up the food store application\
    \ monitoring, so only very recent metric values might be available.*\n\n* Once\
    \ you can see some lines in your graphing area, click on the left arrow (`<-`)\
    \ in the upper left corner.\n\n* Now you should have a dashboard with a single\
    \ panel, let's add another panel with a different metric.\n![Grafana Create Panel\
    \ Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/04-grafana-1-panel-dashboard-page.png)\n\
    \n* In the upper right corner of the dashboard page, click on `Add Panel` and\
    \ repeat the previous steps only this time\nuse a different query. <br>\n`rate(flask_http_request_total[2m])`\
    \ this should give you the rate of requests served by the application over 2 minutes.\n\
    \n* Once you have set up the second panel, your dashboard should look something\
    \ like this <br>\n![Grafana Create Panel Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/04-grafana-2-panel-dashboard-page.png)\n\
    \nIf you want to see live changes to the dashboard, go to the [food store application\
    \ page](http://metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/)\
    \ and make some purchases. <br>\nThen click on the refresh button in the upper\
    \ right corner.\n\nThat's it! you should have your own monitoring dashboard now.\n\
    \n**You can do a lot more with dashboards like saving them, exporting as jsons,\
    \ using variables, etc. <br>\nYou can learn more about dashboards [here](https://grafana.com/docs/grafana/latest/features/dashboard/dashboards/)**\n"
  difficulty: basic
  slug: 4create-dashboard
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: '30443'
    title: web-ui
    type: service
  timelimit: '300'
  title: Step 4 - Visualize metrics in Grafana
  type: challenge
developers:
- btannous@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner:
- openshift
private: 'false'
published: 'true'
skipping_enabled: 'true'
slug: deploy-prometheus-grafana
tags:
- openshift
title: How to set up Prometheus and Grafana on OpenShift
type: truck
