#!/bin/bash

# setup vars
export TERM=xterm-color
export KUBECONFIG=/opt/kubeconfig

# save them to the profile
echo "export TERM=xterm-color" >> /root/.bashrc
echo "export KUBECONFIG=/opt/kubeconfig" >> /root/.bashrc

ENS4IP=$(ip -4 -o addr show ens4 | awk '{print $4}' | cut -d "/" -f 1)

# dnsmasq config for crc-dnsmasq.service
cat << EOF > /var/srv/dnsmasq.conf
user=root
port= 53
bind-interfaces
expand-hosts
log-queries
local=/crc.testing/
domain=crc.testing
address=/apps-crc.testing/$ENS4IP
address=/api.crc.testing/$ENS4IP
address=/api-int.crc.testing/$ENS4IP
address=/crc-h2dj6-master-0.crc.testing/192.168.126.11
EOF

# configure local resolver
sed -i '/^search.*/a nameserver 10.88.0.8' /etc/resolv.conf

# start openshift
systemctl start crc-dnsmasq.service
systemctl start kubelet

# place yaml
cat << EOF > /tmp/pull-secret.yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJjbG91ZC5vcGVuc2hpZnQuY29tIjp7ImF1dGgiOiJiM0JsYm5Ob2FXWjBMWEpsYkdWaGMyVXRaR1YySzJKbGJtOWpaV3h2ZEhWd2NtOWhjbU52YlRGeWVYUndjamwyYVcxc2VHcDJiR1JpTjNka2JEUnhZMnBpY0RwSk0weFNRVUU0VTBoVVNGUXpVbGhCVnpOSVZFaFNRVkZSUjBFMU5rNUZVVlZPUVZGSFNEZElPVnBCVGs5UFdUSktTbFJPVHpOV1FVaEZSMGRHTkRkTSIsImVtYWlsIjoiYmVuQG9jZWxvdHVwcm9hci5jb20ifSwicXVheS5pbyI6eyJhdXRoIjoiYjNCbGJuTm9hV1owTFhKbGJHVmhjMlV0WkdWMksySmxibTlqWld4dmRIVndjbTloY21OdmJURnllWFJ3Y2psMmFXMXNlR3AyYkdSaU4zZGtiRFJ4WTJwaWNEcEpNMHhTUVVFNFUwaFVTRlF6VWxoQlZ6TklWRWhTUVZGUlIwRTFOazVGVVZWT1FWRkhTRGRJT1ZwQlRrOVBXVEpLU2xST1R6TldRVWhGUjBkR05EZE0iLCJlbWFpbCI6ImJlbkBvY2Vsb3R1cHJvYXIuY29tIn0sInJlZ2lzdHJ5LmNvbm5lY3QucmVkaGF0LmNvbSI6eyJhdXRoIjoiTlRJNE9UUTBOekI4ZFdoakxURlNXVlJRY2psMlNVMU1XRXBXVEVSQ04xZEVURFJ4WTJwQ2NEcGxlVXBvWWtkamFVOXBTbE5WZWxWNFRXbEtPUzVsZVVwNlpGZEphVTlwU210UFIwWnNUVlJzYWxreVNtdE9WRUV3VGxkTmVsbHRVVEJhYlZwcldsUktiVnBFVlRKT1JFbDVUV2xLT1M1d1lrTjNXVXBoVFZSZlRXazRSVzlzYlRaM016RTFXbWd5VUVaWGREQTBiMVl6YlZkWFF6SlFUbmhoVkVWa1VuWkxORmhWV1dRdFNWaHdWMVZhVDJONlIwUTVNbEZCVVUwMmExQXphekZpZVhSRGVqZEVVVXRRWm10TWNsRndlbGg2ZEROa2J6TTFPRTR6Vmtob01tVlZSMVJ3Vkc1WExWVjNVVzVtU2pCRk4zRXRiM1JOZVRaQlpGZ3hhbVJQUkRWbGRuVjNYMnBDYjNSbk1sbE1VQzFETjNSU1pHdFlkekZXUjNOSE0zZHlOMkkxVjJsb1VEUnlkRlZaUjJoTFQxbDNVRTF5V0d0UWFGUlNaRXN0WVVGeGRtTXpNa1ZrVlZaVU9HOUdYMWhLUzFkVmFYRnVjMVZLWjBwaWRFUllWRTUyU1d0TmIxTmhVVFJyUW0xNlVGUlVNVEpWY2pWdk5GRlRWa1ZCU1ZOamN6ZERhVVZUT1doUWFtNXljVUpZVXpKbFpXRlNRbFZOWkRaeFMwNU9OR2xqWm1oTFRUbHpWbko0ZVhSRlJYWTBjbTVTUW1Wa00xTTBaV2xoVkdObVgxcEdTblYxZURrNFJVMVhjWFZEUTNJNGFHMWZPRWRtY0ZKUVNXNHlZVlp2Y2w5RVNrZDJNbEJZV2kwdFpIZFZhVE5uY0hjNVFrUlFRemhRUVhWS1pWRTRXa1J5WkVvMFdYVmhNRWxLYUdwNk5HdE1ZM0ZwWTNOVU1ITm1jVTVJZGw5cWR6aENVbXBhZDFZdE4yRkpkM0EyVGxnd1VXSlNhWFJ2WW5ORGNtaEtYMVZRVUd4TVZYTjNOekp4VTNCNFVFUlRVMjVOUmpsdVRIUlJPVEEyUlhCTWFtdEZhMDVUTkhJeFJEZDVVa2RwVFVzeGEySTRXalJRZGtOelpUVnJaV3hmZEhOSmNVMTBhRGRIWDFoT1oxUlVlR3hmZVVGcllYVk9NMHB4TUY5WVlUQTBWVzF6ZVZwaFJVZFVSVnBmVjNoQkxXdFFaMDFKV2tvNFZIRkhVRU5zT0dJd0xYQkZWR0pIZEhJdGJWbERWSFkxYTBaMVVtMWlRVjlxWkVrNFlUTjRVVzFIVXpCVFZ6aHdMVVpmVUVOSFMyaHZTWGcyU21SbVRUVnNTbVZaVG1seGVIUnJVV3hXTFhWemNreG5WV05TZFRaTlgzSmZSMWd4VlE9PSIsImVtYWlsIjoiYmVuQG9jZWxvdHVwcm9hci5jb20ifSwicmVnaXN0cnkucmVkaGF0LmlvIjp7ImF1dGgiOiJOVEk0T1RRME56QjhkV2hqTFRGU1dWUlFjamwyU1UxTVdFcFdURVJDTjFkRVREUnhZMnBDY0RwbGVVcG9Za2RqYVU5cFNsTlZlbFY0VFdsS09TNWxlVXA2WkZkSmFVOXBTbXRQUjBac1RWUnNhbGt5U210T1ZFRXdUbGROZWxsdFVUQmFiVnByV2xSS2JWcEVWVEpPUkVsNVRXbEtPUzV3WWtOM1dVcGhUVlJmVFdrNFJXOXNiVFozTXpFMVdtZ3lVRVpYZERBMGIxWXpiVmRYUXpKUVRuaGhWRVZrVW5aTE5GaFZXV1F0U1Zod1YxVmFUMk42UjBRNU1sRkJVVTAyYTFBemF6RmllWFJEZWpkRVVVdFFabXRNY2xGd2VsaDZkRE5rYnpNMU9FNHpWa2hvTW1WVlIxUndWRzVYTFZWM1VXNW1TakJGTjNFdGIzUk5lVFpCWkZneGFtUlBSRFZsZG5WM1gycENiM1JuTWxsTVVDMUROM1JTWkd0WWR6RldSM05ITTNkeU4ySTFWMmxvVURSeWRGVlpSMmhMVDFsM1VFMXlXR3RRYUZSU1pFc3RZVUZ4ZG1Nek1rVmtWVlpVT0c5R1gxaEtTMWRWYVhGdWMxVktaMHBpZEVSWVZFNTJTV3ROYjFOaFVUUnJRbTE2VUZSVU1USlZjalZ2TkZGVFZrVkJTVk5qY3pkRGFVVlRPV2hRYW01eWNVSllVekpsWldGU1FsVk5aRFp4UzA1T05HbGpabWhMVFRselZuSjRlWFJGUlhZMGNtNVNRbVZrTTFNMFpXbGhWR05tWDFwR1NuVjFlRGs0UlUxWGNYVkRRM0k0YUcxZk9FZG1jRkpRU1c0eVlWWnZjbDlFU2tkMk1sQllXaTB0WkhkVmFUTm5jSGM1UWtSUVF6aFFRWFZLWlZFNFdrUnlaRW8wV1hWaE1FbEthR3A2Tkd0TVkzRnBZM05VTUhObWNVNUlkbDlxZHpoQ1VtcGFkMVl0TjJGSmQzQTJUbGd3VVdKU2FYUnZZbk5EY21oS1gxVlFVR3hNVlhOM056SnhVM0I0VUVSVFUyNU5Samx1VEhSUk9UQTJSWEJNYW10RmEwNVROSEl4UkRkNVVrZHBUVXN4YTJJNFdqUlFka056WlRWclpXeGZkSE5KY1UxMGFEZEhYMWhPWjFSVWVHeGZlVUZyWVhWT00wcHhNRjlZWVRBMFZXMXplVnBoUlVkVVJWcGZWM2hCTFd0UVowMUpXa280VkhGSFVFTnNPR0l3TFhCRlZHSkhkSEl0YlZsRFZIWTFhMFoxVW0xaVFWOXFaRWs0WVRONFVXMUhVekJUVnpod0xVWmZVRU5IUzJodlNYZzJTbVJtVFRWc1NtVlpUbWx4ZUhSclVXeFdMWFZ6Y2t4blZXTlNkVFpOWDNKZlIxZ3hWUT09IiwiZW1haWwiOiJiZW5Ab2NlbG90dXByb2FyLmNvbSJ9fX0K
kind: Secret
metadata:
  name: pull-secret
  namespace: openshift-config
type: kubernetes.io/dockerconfigjson
EOF

# admin/admin
cat << EOF > /tmp/pass.htpasswd
admin:$2y$05$nBJcAm4N6d013h6cZ2.fTeN.QW9YOmALCYLO1XyeKrfMxu0YgJA02
EOF

cat << EOF > /tmp/oauth-admin.yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: admin_htpasswd_provider
    mappingMethod: claim
    type: HTPasswd
    htpasswd:
      fileData:
        name: htpass-secret-admin
EOF

# setup the pull secret for the cluster
until oc replace -f /tmp/pull-secret.yaml 2>/dev/null 1>&2; do echo "Resetting pull secret. This fails when the apiserver is not ready."; sleep 1; done
until oc create secret generic htpass-secret-admin --from-file=htpasswd=/tmp/pass.htpasswd -n openshift-config 2>/dev/null 1>&2; do echo "Add admin secret. This fails when the apiserver is not ready."; sleep 1; done
until oc apply -f /tmp/oauth-admin.yaml 2>/dev/null 1>&2; do echo "Adding admin user. This fails when the apiserver is not ready."; sleep 1; done
until oc adm policy add-cluster-role-to-user cluster-admin admin 2>/dev/null 1>&2; do echo "Config admin policy. This fails when the apiserver is not ready."; sleep 1; done

# clean up
rm /tmp/pull-secret.yaml /tmp/oauth-admin.yaml /tmp/pass.htpasswd

# make the web console available?
cat << EOF > /tmp/console-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: console
  name: console-svc
  namespace: openshift-console
spec:
  ports:
  - name: console
    port: 8443
    nodePort: 30443
    protocol: TCP
  selector:
    app: console
    component: ui
  type: NodePort
EOF

