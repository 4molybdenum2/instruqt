slug: enterprise-java-amq-getting-started-broker
id: zzpkay6esqxg
type: track
title: Application Messaging with Openshift
description: |
  ## Overview

  AMQ provides fast, lightweight, and secure messaging for Internet-scale applications. AMQ components use industry-standard message protocols and support a wide range of programming languages and operating environments. AMQ gives you the strong foundation you need to build modern distributed applications.

  ## What is AMQ Broker?

  AMQ Broker is a pure-Java multiprotocol message broker. It’s built on an efficient, asynchronous core, with a fast native journal for message persistence and the option of shared-nothing state replication for high availability.

  * **Persistence** - A fast, native-IO journal or a JDBC-based store
  * **High availability** - Shared store or shared-nothing state replication
  * **Advanced queueing** - Last value queues, message groups, topic hierarchies, and large message support
  * **Multiprotocol** - AMQP 1.0, MQTT, STOMP, OpenWire, and HornetQ Core

  AMQ Broker is based on the [Apache ActiveMQ Artemis](https://activemq.apache.org/artemis/) project.

  ## What will you learn

  In this tutorial you will learn how to setup a Red Hat AMQ message broker instance running on OpenShift.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- dahmed@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
private: false
published: true
challenges:
- slug: 01-creating-an-initial-project
  id: jtixhdl1hzqc
  type: challenge
  title: Creating an Initial Project
  notes:
  - type: text
    contents: |
      ## Overview

      AMQ provides fast, lightweight, and secure messaging for Internet-scale applications. AMQ components use industry-standard message protocols and support a wide range of programming languages and operating environments. AMQ gives you the strong foundation you need to build modern distributed applications.

      ## What is AMQ Broker?

      AMQ Broker is a pure-Java multiprotocol message broker. It’s built on an efficient, asynchronous core, with a fast native journal for message persistence and the option of shared-nothing state replication for high availability.

      * **Persistence** - A fast, native-IO journal or a JDBC-based store
      * **High availability** - Shared store or shared-nothing state replication
      * **Advanced queueing** - Last value queues, message groups, topic hierarchies, and large message support
      * **Multiprotocol** - AMQP 1.0, MQTT, STOMP, OpenWire, and HornetQ Core

      AMQ Broker is based on the [Apache ActiveMQ Artemis](https://activemq.apache.org/artemis/) project.

      ## What will you learn

      In this tutorial you will learn how to setup a Red Hat AMQ message broker instance running on OpenShift.
  assignment: |
    To get started, first we need to login to OpenShift.

    ### Logging in to the Cluster via OpenShift CLI

    To login to the OpenShift cluster use the following commmand in your **_Terminal_**:

    ```
    oc login -u admin -p admin
    ```

    > You can click on the above command (and all others in this scenario) to automatically copy it into the terminal and execute it.

    This will log you in using the credentials:

    * **Username:** ``admin``
    * **Password:** ``admin``

    You should see the output:

    ```bash
    Login successful.

    You don't have any projects. You can try to create a new project, by running

        oc new-project <projectname>
    ```

    For this scenario lets create a project called ``messaging`` by running the command:

    ```
    oc new-project messaging
    ```

    You should see output similar to:

    ```bash
    Now using project "messaging" on server "https://172.17.0.41:8443".

    You can add applications to this project with the 'new-app' command. For example, try:

        oc new-app centos/ruby-22-centos7~https://github.com/openshift/ruby-ex.git

    to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

        kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node
    ```

    ### Install AMQ broker operator

    AMQ Broker provides container images and Operators for running ActiveMQ Artemis on OpenShift.

    Deploy the Operator Lifecycle Manager Operator Group and Susbcription to easily install the operator in the previously created namespace:

    ```
    oc -n messaging apply -f /opt/operator-install.yaml
    ```

    You should see the following result:

    ```bash
    operatorgroup.operators.coreos.com/broker-operatorgroup created
    subscription.operators.coreos.com/amq-broker created
    ```

    > You can also deploy the AMQ broker operator from the OpenShift OperatorHub from within the administration console.

    ### Check operator deployment

    Follow up the operator deployment to validate it is running.

    To watch the pods status run the following command:

    ```
    oc -n messaging get pods -w
    ```

    You will see the status of the operator changing until it gets to `running`. It should look similar to the following:

    ```bash
    NAME                                  READY   STATUS              RESTARTS   AGE
    amq-broker-operator-6c76986f9-bsrcv   0/1     ContainerCreating   0          1s
    amq-broker-operator-6c76986f9-bsrcv   0/1     ContainerCreating   0          2s
    amq-broker-operator-6c76986f9-bsrcv   0/1     ContainerCreating   0          7s
    amq-broker-operator-6c76986f9-bsrcv   1/1     Running             0          23s
    ```

    Hit <kbd>Ctrl</kbd>+<kbd>C</kbd> to stop the process.

    `^C`

    In the next step, you will deploy a new instance of the AMQ broker.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: 02-create-broker-instance
  id: ng7tipa9okbk
  type: challenge
  title: Deploying a Broker Instance
  assignment: |
    With the project space now available, let's create the broker instance.

    ### Inspect the ActiveMQArtermis custom resource

    Click the link below to open the custom resource (CR) definition for the cluster:

    * `amq-broker.yaml`

    As you can see, we are enabling just one single acceptor and configuring it to accept incomming `AMQP` connections in the default `5672` port.

    We are also enabling the _console_ and exposing the endpoints for external access too.

    ### Creating an AMQ broker

    Switch to the application directory in the command line by issuing the following command:

    ```cd /root/projects/amq-examples/amq-js-demo```

    Create a new broker using the OpenShift command:

    ```
    oc -n messaging apply -f amq-broker.yaml
    ```

    This command will create a broker customer resource, the operator then will take notice of the desired state and will create the required deployment and resources missing to run a new instance.

    You should see the output:

    ```bash
    activemqartemis.broker.amq.io/broker created
    ```

    ### Check broker deployment

    Follow up the AMQ broker deployment to validate it is running.

    To watch the pods status run the following command:

    ```
    oc -n messaging get pods -w
    ```

    You will see the pod for the broker StatefulSet changing the status to `running`. It should look similar to the following:

    ```bash
    NAME                                  READY   STATUS              RESTARTS   AGE
    amq-broker-operator-6c76986f9-brl67   1/1     Running             0          15m
    broker-ss-0                           0/1     ContainerCreating   0          5s
    broker-ss-0                           0/1     ContainerCreating   0          6s
    broker-ss-0                           0/1     Running             0          25s
    broker-ss-0                           1/1     Running             0          57s
    ```

    Hit <kbd>Ctrl</kbd>+<kbd>C</kbd> to stop the process.

    `^C`

    When the provisioning of the broker finishes, you will be set to start using the service. In the next step you will deploy a simple messging application.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: 03-simple-client
  id: x7t8bb6wjmbq
  type: challenge
  title: Creating a Simple Messaging Application
  assignment: |
    The sample project in the upper right part side of the screen, shows the components of your sample Node.js project. This project uses [Red Hat Runtimes](https://developers.redhat.com/appruntimes), a set of open source cloud native application runtimes for modern applications.

    The app implements a simple messaging greeting service that simply sends a Hello World! to a queue and the same application listens in the same queue for greeting messages. We use the Red Hat AMQ JavaScript Client to create a connection to the messaging broker to send and receive messages.

    > The AMQ Clients is a suite of AMQP 1.0 messaging APIs that allow you to make any application a messaging application. It includes both industry-standard APIs such as JMS and new event-driven APIs that make it easy to integrate messaging anywhere. The AMQ Javascript Client is based on the [AMQP Rhea Project](https://github.com/amqp/rhea).

    ### Inspect the application code

    Click the links below to open each file and inspect its contents:

    * `package.json` - Metadata about the project: name, version, dependencies, and other information needed to build and maintain the project.
    * `app.js` - Main logic of the sample application.

    ### Install Dependencies

    Dependencies are listed in the `package.json` file and declare which external projects this sample app requires.
    To download and install them, run the following command:

    ``npm install``

    It will take a few seconds to download, and you should see a final report such as

    ```bash
    added 140 packages in 2.937s
    ```

    ### Deploy

    Build and deploy the project using the following command:

    ```
    npm run openshift
    ```

    > This uses NPM and the [Nodeshift](https://github.com/bucharest-gold/nodeshift) project to build and deploy the sample application to OpenShift using the containerized Node.js runtime.

    The build and deploy may take a minute or two. Wait for it to complete.

    You should see `INFO complete` at the end of the build output, and you should not see any obvious errors or failures.

    ### Check application deployment

    Follow up the application deployment to validate it is running.

    To watch the pods status run the following command:

    ```
    oc -n messaging get pods -w
    ```

    You will see the pod for the application changing the status to `running`. It should look similar to the following:

    ```bash
    NAME                                  READY   STATUS      RESTARTS   AGE
    amq-broker-operator-6c76986f9-6vjhj   1/1     Running     0          6m5s
    amq-js-demo-1-deploy                  0/1     Completed   0          32s
    amq-js-demo-1-dftm4                   1/1     Running     0          26s
    amq-js-demo-s2i-1-build               0/1     Completed   0          90s
    broker-ss-0                           1/1     Running     0          4m46s
    ```

    Hit <kbd>Ctrl</kbd>+<kbd>C</kbd> to stop the process.

    `^C`

    In the next step you will check your application is running.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: 04-running-application
  id: uhop2qxgbwg0
  type: challenge
  title: Access the application running on OpenShift
  assignment: |
    After the previous step build finishes, it will take less than a minute for the application to become available.

    ### Check the application logs

    Now that the application is up and running you can check the logs to check how is everything going on.

    Let's use the OpenShift CLI tool to connect with the deployment and view the pod's log.

    Use the following command to retrieve the logs:

    `oc -n messaging logs -f dc/amq-js-demo`

    You will see a message every 10 seconds with the following text:

    ``Message received: {"id":1,"text":"Hello World!","timestamp":1605814628546}``

    This message is been sent and received to the ``example`` queue by the application you just deployed.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
checksum: "4652435589341712625"
