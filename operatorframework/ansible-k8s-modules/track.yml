slug: operatorframework-ansible-k8s-modules
id: f5ls8nupyqky
type: track
title: Ansible Kubernetes Modules
description: |
  Since you are interested in *using Ansible for lifecycle management of applications on Kubernetes*, it will be beneficial to learn how to use the [Ansible k8s (Kubernetes) module](https://docs.ansible.com/ansible/latest/modules/k8s_module.html#k8s-info-module).

  The k8s module allows you to:
   - Leverage your existing Kubernetes resource files (written in YAML)
   - Express Kubernetes lifecycle management actions in native Ansible.

  One of the biggest benefits of using Ansible in conjunction with existing Kubernetes resource files is the ability to use Ansible's built-in [Jinja templating](https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html) engine to customize deployments by simply setting Ansible variables.

  ---

  By the end of this scenario, you'll be able to use the Ansible k8s module to:

  - _Create_ and _remove_ Kubernetes resources
  - _Reuse_ existing Kubernetes manifest files with Ansible
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- yurimsa@gmail.com
- nvinto@redhat.com
private: false
published: true
challenges:
- slug: step1
  id: ff6oomorcrer
  type: challenge
  title: Running the k8s Ansible modules locally
  notes:
  - type: text
    contents: |
      Since you are interested in *using Ansible for lifecycle management of applications on Kubernetes*, it will be beneficial to learn how to use the [Ansible k8s (Kubernetes) module](https://docs.ansible.com/ansible/latest/modules/k8s_module.html#k8s-info-module).

      The k8s module allows you to:
       - Leverage your existing Kubernetes resource files (written in YAML)
       - Express Kubernetes lifecycle management actions in native Ansible.

      One of the biggest benefits of using Ansible in conjunction with existing Kubernetes resource files is the ability to use Ansible's built-in [Jinja templating](https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html) engine to customize deployments by simply setting Ansible variables.

      ---

      By the end of this scenario, you'll be able to use the Ansible k8s module to:

      - _Create_ and _remove_ Kubernetes resources
      - _Reuse_ existing Kubernetes manifest files with Ansible
  assignment: |
    For this example we will *create and delete a namespace* with the switch of an Ansible variable.

    Let's begin by connecting to OpenShift:

    ```
    oc login -u admin -p admin https://api.crc.testing:6443 --insecure-skip-tls-verify=true
    ```
    ---

    ###### **a. From *Visual Editor* Tab, open `example-role/tasks/main.yml` to contain the Ansible shown below.**

    ```yaml
    ---
    - name: set test namespace to {{ state }}
      k8s:
        api_version: v1
        kind: Namespace
        name: test
        state: "{{ state }}"
      ignore_errors: true
    ```

    Or can easily update this file by running the following command:

    ```
    curl -s https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/tasksmain1.yml -o /root/tutorial/example-role/tasks/main.yml
    ```
    ---

    ###### **b. Modify vars file `example-role/defaults/main.yml`, setting `state: present` by default.**

    ```yaml
    ---
    state: present

    ```

    You can easily update this file by running the following command:

    ```
    curl -s https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/defaultsmain1.yml -o /root/tutorial/example-role/defaults/main.yml
    ```
    ---

    ###### **c. Run playbook.yml, which will execute 'example-role'.**

    ```
    cd /root/tutorial && \
        ansible-playbook -i myhosts playbook.yml
    ```

    ---

    ###### **d. Check that the namespace `test` was created.**

    ```
    oc get projects | grep test
    ```

    ```
    NAME              DISPLAY NAME   STATUS
    test                             Active
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root/tutorial
  difficulty: basic
  timelimit: 300
- slug: step2
  id: nxrvixuqxwf1
  type: challenge
  title: Leveraging existing k8s Resource Files inside of Ansible
  assignment: |-
    Next, we'll use the Ansible k8s module to leverage existing Kubernetes and OpenShift Resource files. Let's take the **[nginx deployment example](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment)**
     from the Kubernetes docs.

     **Note**: *We've modified the resource file slightly as we will be deploying
      on OpenShift.*

    Let's begin by using the context of the previously created project:

    ```
    oc project test
    ```

    ---

     ###### **a. Copy the nginx deployment definition `nginx-deployment.yml` into `example-role/templates`, adding a .j2 extension**

    ```
    cp /root/tutorial/nginx-deployment.yml /root/tutorial/example-role/templates/nginx-deployment.yml.j2
    ```

    ```
    cat /root/tutorial/example-role/templates/nginx-deployment.yml.j2
    ```


    ```yaml
    kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: nginx-deployment
    spec:
      template:
        metadata:
          labels:
            name: nginx
        spec:
          containers:
            - name: nginx
              image: nginx:1.15.4
              ports:
              - containerPort: 80
      replicas: 3
      selector:
        name: nginx
    ```


     ###### **b. From *Visual Editor* Tab, update tasks file `example-role/tasks/main.yml` to create the nginx deployment using the k8s module**

    ```yaml
    ---
    - name: set test namespace to {{ state }}
      k8s:
       api_version: v1
       kind: Namespace
       name: test
       state: "{{ state }}"

    - name: set nginx deployment to {{ state }}
      k8s:
       state: "{{ state }}"
       definition: "{{ lookup('template', 'nginx-deployment.yml.j2') }}"
       namespace: test
    ```

    You can easily update this file by running the following command:

    ```
    curl -s https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/tasksmain2.yml -o /root/tutorial/example-role/tasks/main.yml
    ```

    ---

    ###### **c. Run the Playbook to deploy nginx onto OpenShift**

    Running the Playbook with the command below will read the `state` variable defined in `example-role/defaults/main.yml`

    ```
    cd /root/tutorial/ && \
        ansible-playbook -i myhosts playbook.yml
    ```

    ---

    ###### **d. Examine Playbook results**
    You can see the `test` namespace created and the `nginx` deployment created in the new namespace.

    ```
    oc get all -n test
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root/tutorial
  difficulty: basic
  timelimit: 300
- slug: step3
  id: 3zvgtqcvmtho
  type: challenge
  title: Customizing k8s Resource files with Ansible
  assignment: |
    Next, let's make it possible to customize the replica count for our [nginx deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment) by adding an `nginx_replicas` variable to the Deployment template and filling the variable value dynamically with Ansible.

    ---

    ###### **a. From *Visual Editor* Tab, modify the vars file `example-role/defaults/main.yml`, setting `nginx_replicas: 2`**

    ```yaml
    ---
    state: present
    nginx_replicas: 2
    ```

    You can easily update this file by running the following command:

    ```
    curl -s https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/defaultsmain2.yml -o /root/tutorial/example-role/defaults/main.yml
    ```
    ---

    ###### **b. Modify nginx deployment definition `nginx-deployment.yml.j2` to read `replicas` from the `nginx_replicas` variable**

    ```yaml
    kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: nginx-deployment
    spec:
      template:
        metadata:
          labels:
            name: nginx
        spec:
          containers:
            - name: nginx
              image: nginx:1.15.4
              ports:
              - containerPort: 80
      replicas: {{ nginx_replicas }}
      selector:
        name: nginx
    ```

    You can easily update this file by running the following command:

    ```
    curl -s https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/nginx-deployment-updated.yml.j2 -o /root/tutorial/example-role/templates/nginx-deployment.yml.j2
    ```
    ---

    ###### **c. Run the Playbook to change the nginx replica count**

    Running the Playbook again will read the variable `nginx_replicas` and use the provided value to customize the nginx Deployment.

    ```
    cd /root/tutorial && \
      ansible-playbook -i myhosts playbook.yml
    ```

    ---

    ###### **d. Examine Playbook results**
    After running the Playbook, the cluster will scale down one of the nginx pods to meet the new requested replica count of 2.

    ```
    oc get pods -n test
    ```

    ---
    ###### **e. Tear down the nginx deployment**

    To remove the nginx deployment, we'll override the `state` variable to contain `state=absent` using the [`-e / --extra-vars`](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#passing-variables-on-the-command-line) flag.

    ```
    cd /root/tutorial && \
      ansible-playbook -i myhosts playbook.yml --extra-vars state=absent
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root/tutorial
  difficulty: basic
  timelimit: 300
checksum: "3497585692771723858"
