slug: operatorframework-ansible-mcrouter-operator
id: fbxapx0fame8
type: track
title: Mcrouter Operator powered by Ansible Operator
description: |
  The Mcrouter Operator was built with the [Ansible Operator SDK](https://github.com/operator-framework/operator-sdk/blob/master/doc/ansible/user-guide.md). It is not yet intended for production use.

  [Mcrouter](https://github.com/facebook/mcrouter) is a Memcached protocol router for scaling [Memcached](http://memcached.org/) deployments. It's a core component of cache infrastructure at Facebook and Instagram where mcrouter handles almost 5 billion requests per second at peak.

  Mcrouter features:

  * Memcached ASCII protocol
  * Connection pooling
  * Multiple hashing schemes
  * Prefix routing
  * Replicated pools
  * Production traffic shadowing
  * Online reconfiguration
  * Flexible routing

  Mcrouter is developed and maintained by Facebook.



  At this point in our training, we should have a basic understanding of the *Operator pattern*.
   - Ansible Operator is an Operator which is _powered by Ansible_.
   - Custom Resource events trigger Ansible tasks as opposed to the traditional approach of handling these events with Go code.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- dahmed@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
private: false
published: true
challenges:
- slug: step1
  id: qcnlyxjwol7q
  type: challenge
  title: Deploying the Mcrouter Operator
  notes:
  - type: text
    contents: |
      The Mcrouter Operator was built with the [Ansible Operator SDK](https://github.com/operator-framework/operator-sdk/blob/master/doc/ansible/user-guide.md). It is not yet intended for production use.

      [Mcrouter](https://github.com/facebook/mcrouter) is a Memcached protocol router for scaling [Memcached](http://memcached.org/) deployments. It's a core component of cache infrastructure at Facebook and Instagram where mcrouter handles almost 5 billion requests per second at peak.

      Mcrouter features:

      * Memcached ASCII protocol
      * Connection pooling
      * Multiple hashing schemes
      * Prefix routing
      * Replicated pools
      * Production traffic shadowing
      * Online reconfiguration
      * Flexible routing

      Mcrouter is developed and maintained by Facebook.



      At this point in our training, we should have a basic understanding of the *Operator pattern*.
       - Ansible Operator is an Operator which is _powered by Ansible_.
       - Custom Resource events trigger Ansible tasks as opposed to the traditional approach of handling these events with Go code.
  assignment: |-
    Let's begin by connecting to OpenShift:

    ```
    oc login -u admin -p admin https://api.crc.testing:6443 --insecure-skip-tls-verify=true
    ```


    Create a new project called `mcrouter`:

    ```
    oc new-project mcrouter
    ```

    Let's use one command to deploy the Mcrouter CRD, Service Account, Role, RoleBinding, and Operator Deployment into the cluster:

    ```
    oc apply -f https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/operatorframework/ansible-mcrouter-operator/assets/mcrouter-operator.yaml
    ```

    Let's now verify that all the objects were successfully deployed. Begin by verifying the `kind: Mcrouter` CRD:

    ```
    oc get crd mcrouters.mcrouter.example.com
    ```

    Verify the `mcrouter-operator` Service Account. This Service Account is responsible for the identity of the Mcrouter Operator Deployment.

    ```
    oc get sa
    ```

    Verify the `mcrouter-operator` Role. This Role defines the Role-Based Access Control for the `mcrouter-operator` Service Account.

    ```
    oc get role
    ```

    Verify the `mcrouter-operator` RoleBinding. This RoleBinding applies our Role to the `mcrouter-operator` Service Account.

    ```
    oc get rolebinding
    ```

    Finally, we will verify that the Mcrouter Deployment and its associated pod are successfully running:

    ```
    oc get deploy,pod
    ```

    This Deployment consists of two containers: `operator` and `ansible`. The `ansible` container exists only to expose the standard Ansible stdout logs. The `operator` container contains our Ansible Operator Mcrouter roles/playbooks. Observe the log files for both containers:

    ```
    oc logs deploy/mcrouter-operator -c operator
    ```

    Observe the log files for the Ansible container (it should currently be empty because we have yet to create a Custom Resource).

    ```
    oc logs deploy/mcrouter-operator -c ansible
    ```

    Observe the Service exposing the Operator's [Prometheus metrics endpoint](https://prometheus.io/docs/guides/go-application/#how-go-exposition-works). Ansible-Operator automatically registers this endpoint for you.

    ```
    oc get svc -l name=mcrouter-operator
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  difficulty: basic
  timelimit: 360
- slug: step2
  id: xhz28iqxxuji
  type: challenge
  title: Creating the Mcrouter Custom Resource
  assignment: |
    Now that the Mcrouter Operator is deployed, we can apply the `kind: McRouter` Custom Resource.

    The Mcrouter Custom Resource contains a number of configurable options in the `spec` section.

    ```
    # The image to run for the `mcrouter` Deployment.
    mcrouter_image: devan2502/mcrouter:latest

    # The port Mcrouter will run on.
    mcrouter_port: 5000

    # The image to run for the `memcached` StatefulSet.
    memcached_image: memcached:1.5-alpine

    # The size of the memcached pool.
    memcached_pool_size: 3

    # The port Memcached will run on.
    memcached_port: 11211

    # The memcached pool can be 'sharded' or 'replicated'.
    # 'sharded' uses a key hashing algorithm to distribute Memcached sets and gets among Memcached Pods; this means a key foo may always go to pod A, while the key bar always goes to pod B.
    # 'replicated' sends all Memcached sets to all Memcached pods, and distributes gets randomly.
    pool_setup: replicated

    # Set to '/var/mcrouter/fifos' to debug mcrouter with mcpiper.
    debug_fifo_root: ''
    ```

    Let's create an instance of Mcrouter that will create a replicated Memcached pool size of 2. This will create a Deployment consisting of 1 pod (`image: devan2502/mcrouter:latest` ) as well as a Memcached StatefulSet consists of 2 memcached pods (`memcached_image: memcached:1.5-alpine`).

    ```
    apiVersion: mcrouter.example.com/v1alpha3
    kind: Mcrouter
    metadata:
      name: mcrouter
    spec:
      mcrouter_image: devan2502/mcrouter:latest
      mcrouter_port: 5000
      memcached_image: memcached:1.5-alpine
      memcached_pool_size: 2
      memcached_port: 11211
      pool_setup: replicated # or 'sharded'
      debug_fifo_root: '' # set to '/var/mcrouter/fifos' for mcpiper
    ```

    Before applying the Custom Resource (CR), open up a new terminal window and follow the logs for the `ansible` container. This will expose the standard Ansible stdout logs and we should see activity once the CR is created.

    ```
    oc logs deploy/mcrouter-operator -c ansible -f
    ```

    Run the following to apply the CR:

    ```
    oc apply -f https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/operatorframework/ansible-mcrouter-operator/assets/mcrouter_v1alpha3_mcrouter_cr.yaml
    ```

    Verify the Mcrouter CR now exists:

    ```
    oc get mcrouter
    ```

    Verify the `mcrouter` deployment pod:

    ```
    oc get pod -l name=mcrouter-operator
    ```

    The `mcrouter` Deployment Pod is exposed via a Service listening on the default memcached port, `11211`. Mcrouter will connect to the pool via the backend memcached instances residing in the pool via this Service.

    ```
    oc get svc mcrouter-memcached
    ```

    Verify the two `mcrouter` memcache instances are running:

    ```
    oc get pods -l app=mcrouter-cache
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  difficulty: basic
  timelimit: 360
- slug: step3
  id: vhgnuwxbrymz
  type: challenge
  title: Using Mcrouter
  assignment: |
    We can now verify connectivity to our Memcached pool via Mcrouter.

    Let's begin by exposing the Mcrouter Pod as a Service accessible to the Cluster.

    ```
    oc expose deploy/mcrouter --name mcrouter --type=ClusterIP --target-port=5000
    ```

    Create a temporary telnet Pod and connect to Mrouter:

    ```
    oc run -it --rm telnet --image=registry.redhat.io/rhel8/support-tools --restart=Never -- telnet mcrouter 5000
    ```

    After a few seconds you will see a message `If you don't see a command prompt, try pressing enter.` ***But do not press enter***. Run the following commands to insert the key `ansible` with an 8 byte value of `operator` for 900 seconds and exit:

    ```
    set ansible 0 900 8
    operator
    get ansible
    quit
    ```

    We can also utilize the `mcperf` tool for measuring Memcached server performance.

    This command will create ***1000*** connections to Mcrouter. The connections are created at the rate of ***1000*** conns/sec and on every connection it sends ***10*** `set` requests at the rate of ***1000*** reqs/sec with the item sizes derived from a uniform distribution in the interval of 1 to 16 bytes:

    ```
    oc run -it --rm mcperf --image=quay.io/madorn/mcperf --restart=Never -- mcperf -s mcrouter -p 5000 --linger=0 --timeout=5 --conn-rate=1000 --call-rate=1000 --num-calls=10 --num-conns=1000 --sizes=u1,16
    ```

    We should be able to see a significant spike in CPU/Memory usage from running the above command. You can check it out by selecting the ***Console*** tab which will open the OpenShift dashboard. Log in with username: `admin`, password: `admin`, and then select ***Monitoring*** --> ***Dashboards***. Also be sure to run the following command:

    ```
    oc adm policy add-cluster-role-to-user cluster-admin admin
    ```
    `
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  difficulty: basic
  timelimit: 360
- slug: step4
  id: tsne6ybtj79s
  type: challenge
  title: Testing Modification of the Mcrouter Custom Resource
  assignment: |-
    One simple way to verify Mcrouter Operator functionality is by changing the `memcached_pool_size` in the Mcrouter Custom Resource. Run the folllowing command to bump the pool size to `3` and then observe what happens in the cluster:

    ```
    oc patch mcrouter mcrouter  --type='json' -p '[{"op": "replace", "path": "/spec/memcached_pool_size", "value":3}]'
    ```

    After a few seconds, a new Memcached Pod should be added to the pool:

    ```
    oc get pods -l app=mcrouter-cache
    ```

    You should now see the additional Memcached instances reflected in Mcrouter's configuration string.

    ```
    oc describe pod -l app=mcrouter | grep Command -A2
    ```
    `
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  difficulty: basic
  timelimit: 360
- slug: step5
  id: sf1a6pwrxmcc
  type: challenge
  title: Testing Mcrouter failover
  assignment: |
    Thanks to the embedded StatefulSet controller our Memcached pool will handle creation of a new Pod in the event of failure.

    Fetch one of Mcrouter's Memcached Pods from the pool:

    ```
    MCROUTER_CACHE_0=`oc get pods -l app=mcrouter-cache -o jsonpath={$.items[0].metadata.name}`
    echo $MCROUTER_CACHE_0
    ```


    Delete the Pod:

    ```
    oc delete pod $MCROUTER_CACHE_0
    ```

    The Pod should respawn:

    ```
    oc get pods -l app=mcrouter-cache
    ```
    `
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  difficulty: basic
  timelimit: 360
checksum: "5790706604758789035"
