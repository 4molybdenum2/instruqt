challenges:
- assignment: "The term service mesh is used to describe the network of microservices\
    \ that make up such applications and the interactions between them. As a service\
    \ mesh grows in size and complexity, it can become harder to understand and manage.\
    \ Its requirements can include discovery, load balancing, failure recovery, metrics,\
    \ and monitoring. A service mesh also often has more complex operational requirements,\
    \ like A/B testing, canary releases, rate limiting, access control, and end-to-end\
    \ authentication.\n\nRed Hat Service Mesh, based on the open source [Istio project](https://istio.io),\
    \ provides behavioral insights and operational control over the service mesh as\
    \ a whole, offering a complete solution to satisfy the diverse requirements of\
    \ microservice applications. It provides a number of key capabilities uniformly\
    \ across a network of services:\n\n- **Traffic Management**. Control the flow\
    \ of traffic and API calls between services, make calls more reliable, and make\
    \ the network more robust in the face of adverse conditions.\n\n- **Observability**.\
    \ Gain understanding of the dependencies between services and the nature and flow\
    \ of traffic between them, providing the ability to quickly identify issues.\n\
    \n- **Policy Enforcement**. Apply organizational policy to the interaction between\
    \ services, ensure access policies are enforced and resources are fairly distributed\
    \ among consumers. Policy changes are made by configuring the mesh, not by changing\
    \ application code.\n\n- **Service Identity and Security**. Provide services in\
    \ the mesh with a verifiable identity and provide the ability to protect service\
    \ traffic as it flows over networks of varying degrees of trustability.\n\nIn\
    \ addition to these behaviors, Istio is designed for extensibility to meet diverse\
    \ deployment needs:\n\n- **Platform Support**. Istio is designed to run in a variety\
    \ of environments including ones that span Cloud, on-premise, Kubernetes, Mesos\
    \ etc. We\u2019re initially focused on Kubernetes but are working to support other\
    \ environments soon.\n\n- **Integration and Customization**. The policy enforcement\
    \ component can be extended and customized to integrate with existing solutions\
    \ for ACLs, logging, monitoring, quotas, auditing and more.\n\nThese capabilities\
    \ greatly decrease the coupling between application code, the underlying platform,\
    \ and policy. This decreased coupling not only makes services easier to implement,\
    \ but also makes it simpler for operators to move application deployments between\
    \ environments or to new policy schemes. Applications become inherently more portable\
    \ as a result.\n\n\n## What is Traffic?\n\nUsing Istio\u2019s traffic management\
    \ model essentially decouples traffic flow and infrastructure scaling, letting\
    \ operators specify via Pilot what rules they want traffic to follow rather than\
    \ which specific pods/VMs should receive traffic - Pilot and intelligent Envoy\
    \ proxies look after the rest. So, for example, you can specify via Pilot that\
    \ you want 5% of traffic for a particular service to go to a canary version irrespective\
    \ of the size of the canary deployment, or send traffic to a particular version\
    \ depending on the content of the request.\n"
  difficulty: intermediate
  slug: 01-what-is-service-mesh
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: What is Service Mesh and why we need it?
  type: challenge
- assignment: "A *service mesh* is the network of microservices that make up applications\
    \ in a distributed microservice architecture and the interactions between those\
    \ microservices. When a Service Mesh grows in size and complexity, it can become\
    \ harder to understand and manage.\n\nBased on the open source [Istio](https://istio.io)\
    \ project, Red Hat OpenShift Service Mesh adds a transparent layer on existing\
    \ distributed applications without requiring any changes to the service code.\
    \ You add Red Hat OpenShift Service Mesh support to services by deploying a special\
    \ sidecar proxy to relevant services in the mesh that intercepts all network communication\
    \ between microservices. You configure and manage the Service Mesh using the control\
    \ plane features.\n\nRed Hat OpenShift Service Mesh gives you an easy way to create\
    \ a network of deployed services that provide:\n* Discovery\n* Load balancing\n\
    * Service-to-service authentication\n* Failure recovery\n* Metrics\n* Monitoring\n\
    \nRed Hat OpenShift Service Mesh also provides more complex operational functions\
    \ including:\n* A/B testing\n* Canary releases\n* Rate limiting\n* Access control\n\
    * End-to-end authentication\n\n## Red Hat OpenShift Service Mesh Architecture\n\
    \nRed Hat OpenShift Service Mesh is logically split into a data plane and a control\
    \ plane:\n\n![Red Hat OpenShift Service Mesh Architecture](https://katacoda.com/openshift/assets/servicemesh/1-introduction/ossm-arch.png)\n\
    \n### [Istio](https://istio.io)\n![Istio](https://katacoda.com/openshift/assets/servicemesh/1-introduction/istio.png)\n\
    \nAs mentioned, Istio drives the service mesh and the **data plane** used withn\
    \ the mesh is a set of intelligent proxies deployed as sidecars. These proxies\
    \ intercept and control all inbound and outbound network communication between\
    \ microservices in the service mesh.\n\n* **Envoy proxy** intercepts all inbound\
    \ and outbound traffic for all services in the service mesh. Envoy is deployed\
    \ as a sidecar to the relevant service in the same pod.\n\nThe **control plane**\
    \ manages and configures Istiod to enforce proxies to route traffic.\n\nIstiod\
    \ provides service discovery, configuration and certificate management. It converts\
    \ high-level routing rules to Envoy configurations and propagates them to the\
    \ sidecars at runtime.\n\nSecret Discovery Service (SDS) distributes certificates\
    \ and keys to sidecars directly from Istiod.\n\nRed Hat OpenShift Service Mesh\
    \ also uses the **istio-operator** to manage the installation of the control plane.\
    \ An Operator is a piece of software that enables you to implement and automate\
    \ common activities in your OpenShift cluster. It acts as a controller, allowing\
    \ you to set or change the desired state of objects in your cluster.\n\n### [Kiali](https://kiali.io)\n\
    \n![Kiali](https://katacoda.com/openshift/assets/servicemesh/1-introduction/kiali.png)\n\
    \nKiali provides observability into the Service Mesh running on OpenShift Container\
    \ Platform. Kiali helps you define, validate, and observe your Istio service mesh.\
    \ It helps you to understand the structure of your service mesh by inferring the\
    \ topology, and also provides information about the health of your service mesh.\n\
    \nKiali provides an interactive graph view of your namespace in real time that\
    \ provides visibility into features like circuit breakers, request rates, latency,\
    \ and even graphs of traffic flows. Kiali offers insights about components at\
    \ different levels, from Applications to Services and Workloads, and can display\
    \ the interactions with contextual information and charts on the selected graph\
    \ node or edge. Kiali also provides the ability to validate your Istio configurations,\
    \ such as gateways, destination rules, virtual services, mesh policies, and more.\
    \ Kiali provides detailed metrics, and a basic Grafana integration is available\
    \ for advanced queries. Distributed tracing is provided by integrating Jaeger\
    \ into the Kiali console.\n\nKiali is installed by default as part of the Red\
    \ Hat OpenShift Service Mesh.\n\n### [Jaeger](https://jaegertracing.io)\n\n![Jaeger](https://katacoda.com/openshift/assets/servicemesh/1-introduction/jaeger.png)\n\
    \nEvery time a user takes an action in an application, a request is executed by\
    \ the architecture that may require dozens of different services to participate\
    \ to produce a response. The path of this request is a distributed transaction.\
    \ Jaeger lets you perform distributed tracing, which follows the path of a request\
    \ through various microservices that make up an application.\n\nDistributed tracing\
    \ is a technique that is used to tie the information about different units of\
    \ work together\u2014usually executed in different processes or hosts\u2014to\
    \ understand a whole chain of events in a distributed transaction. Distributed\
    \ tracing lets developers visualize call flows in large service oriented architectures.\
    \ It can be invaluable in understanding serialization, parallelism, and sources\
    \ of latency.\n\nJaeger records the execution of individual requests across the\
    \ whole stack of microservices, and presents them as traces. A trace is a data/execution\
    \ path through the system. An end-to-end trace is comprised of one or more spans.\n\
    \nA span represents a logical unit of work in Jaeger that has an operation name,\
    \ the start time of the operation, and the duration. Spans may be nested and ordered\
    \ to model causal relationships."
  difficulty: intermediate
  slug: 02-details
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Service Mesh Details
  type: challenge
- assignment: "As you might have noticed in the terminal, Red Hat OpenShift Service\
    \ Mesh is being installed.  Once completed you will have access to an OpenShift\
    \ cluster with Service Mesh available.\n\n## Authentication\nThere are two user\
    \ accounts available to you.\n\nAn administrator account:\n* **Username:** `admin`\n\
    * **Password:** `admin`\n\nA developer or non-elevated account:\n* **Username:**\
    \ `developer`\n* **Password:** `developer`\n\n## Add your project to the service\
    \ mesh\nA quick and easy way to add a new project to the service mesh can be found\
    \ below.  Be sure to set the NEWPROJECT environment variable to your project's\
    \ name using:\n\n```\nCONTROL_PLANE_NS=istio-system\nNEW_PROJECT=UPDATE-ME\n```\n\
    `\n```\n\nNow you can add your project to the mesh:\n\n``` \noc patch -n ${CONTROL_PLANE_NS}\
    \ --type='json' smmr default -p '[{\"op\": \"add\", \"path\": \"/spec/members\"\
    , \"value\":[\"'\"${NEW_PROJECT}\"'\"]}]'\n```\n`\n```\n\n## Kiali and Jaeger\n\
    Be sure to also check out the Kiali and Jaeger consoles using the links above\
    \ your terminal window or below.  Login using the OpenShift credentials above.\n\
    * [Kiali](https://kiali-istio-system.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com)\n\
    * [Jaeger](https://jaeger-istio-system.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com)\n\
    \n## Bookinfo\nThe installation script deployed the Istio Bookinfo application\
    \ in the `bookinfo` project.\n\nPlay around using the examples that can be found\
    \ here: https://istio.io/latest/docs/examples/bookinfo/\n\nFor example:\n```\n\
    oc get virtualservices -n bookinfo\n```\n`\n```\n\n"
  difficulty: intermediate
  slug: 03-playground
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Service Mesh Playground
  type: challenge
developers:
- btannous@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: openshift
private: false
published: true
skipping_enabled: false
slug: 1-introduction
tags:
- openshift
title: Red Hat OpenShift Service Mesh and Istio Playground
type: track
