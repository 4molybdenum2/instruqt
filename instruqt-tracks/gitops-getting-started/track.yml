slug: gitops-getting-started
id: ec9auzkeypbz
title: Get started with Argo CD and GitOps with Red Hat OpenShift
teaser: Explore the Red Hat OpenShift GitOps Operator and access Argo CD to deploy
  a sample application.
description: |
  ## Goal

  This guide helps you get started with ArgoCD and GitOps with OpenShift.


  ## Concepts

  [GitOps](https://www.openshift.com/learn/topics/gitops/) is a set of practices that leverages Git workflows to manage infrastructure and application configurations.
  By using Git repositories as the source of truth, it allows the DevOps team to store the entire state of the cluster configuration in Git so that the trail of changes are visible and auditable.

  **GitOps** simplifies the propagation of infrastructure and application configuration changes across multiple clusters by defining your infrastructure and applications definitions as “code”.

  * Ensure that the clusters have similar states for configuration, monitoring, or storage.
  * Recover or recreate clusters from a known state.
  * Create clusters with a known state.
  * Apply or revert configuration changes to multiple clusters.
  * Associate templated configuration with different environments.


  ![ArgoCD Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/argocd-logo.png)

  [Argo CD](https://argoproj.github.io/argo-cd/) is a declarative, GitOps continuous delivery tool for Kubernetes.

  It follows the GitOps pattern of using Git repositories as the source of truth for defining the desired application state.

  It automates the deployment of the desired application states in the specified target environments. Application deployments can track updates to branches, tags, or pinned to a specific version of manifests at a Git commit.


  ## Use case

  This is a simple guide that takes you through the following steps:

  * Exploring the OpenShift GitOps Operator
  * Accessing Argo CD via CLI and Web UI
  * Deploying A Sample Application
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- dahmed@redhat.com
- chernand@redhat.com
- cclyburn@redhat.com
- ryanj@redhat.com
challenges:
- slug: 01-exploring-openshift-operator
  id: l7813dczdeik
  type: challenge
  title: Exploring the OpenShift GitOps Operator
  notes:
  - type: text
    contents: |
      ## Goal

      This guide helps you get started with ArgoCD and GitOps with OpenShift.


      ## Concepts

      [GitOps](https://www.openshift.com/learn/topics/gitops/) is a set of practices that leverages Git workflows to manage infrastructure and application configurations.
      By using Git repositories as the source of truth, it allows the DevOps team to store the entire state of the cluster configuration in Git so that the trail of changes are visible and auditable.

      **GitOps** simplifies the propagation of infrastructure and application
      configuration changes across multiple clusters by defining your infrastructure and applications definitions as “code”.

      * Ensure that the clusters have similar states for configuration, monitoring, or storage.
      * Recover or recreate clusters from a known state.
      * Create clusters with a known state.
      * Apply or revert configuration changes to multiple clusters.
      * Associate templated configuration with different environments.


      ![ArgoCD Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/argocd-logo.png)

      [Argo CD](https://argoproj.github.io/argo-cd/) is a declarative, GitOps continuous delivery tool for Kubernetes.

      It follows the GitOps pattern of using Git repositories as the source of truth for defining the desired application state.

      It automates the deployment of the desired application states in the specified target environments. Application deployments can track updates to branches, tags, or pinned to a specific version of manifests at a Git commit.


      ## Use case

      This is a simple guide that takes you through the following steps:

      * Exploring the OpenShift GitOps Operator
      * Accessing Argo CD via CLI and Web UI
      * Deploying A Sample Application
  assignment: |
    Welcome! In this section we will be exploring the OpenShift GitOps
    Operator, what it installs, and how all the components fit together.

    ## Logging in to OpenShift

    At first, Click the **Web Console** from the row of horizontal tabs at the top of the interactive terminal window. (The **Web Console** tab is the second tab to the right.)

    |NOTE:|
    |----|
    |You might see the following warning notification due to using an untrusted security certificate.
    ![Security warning](../assets/security_warning.png)
    If you do get the warning, click the **Advanced** button to complete the process necessary to grant permission to the browser to access the OpenShift Web Console.|

    You will then be able to login with admin permissions with:

    * **Username:** ``admin``
    * **Password:** ``admin``

    ## Exploring the GitOps Operator Installation

    From the Administrator perspective, go to the *OperatorHub* and search for "Red Hat OpenShift GitOps" operator.

    ![OpenShift GitOps Operator Installation](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/openshift-gitops-operator-installation.png)

    This is a cluster-wide operator and install the operator with the default settings provided. Once installed:

    * Click on `Operators` drop down on the leftside navigation.
    * Click on `Installed Operators`
    * In the `Project` dropdown, make sure `openshift-gitops` is selected.

    You should see that the OpenShift GitOps Operator is installed.

    ![OpenShift GitOps Installed](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/os-gitops-installed.png)

    Another way to view what was installed is to run the following:

    ```
    oc get operators
    ```

    This should have the following output.

    ```shell
    NAME                                                  AGE
    openshift-gitops-operator.openshift-operators         25m
    ```

    Finally, you can verify the installation by running

    ```
    oc get pods -n openshift-gitops
    ```

    You should something similar to the following output.

    ```shell
    NAME                                                          READY   STATUS    RESTARTS   AGE
    cluster-b5798d6f9-p9mt5                                       1/1     Running   0          12m
    kam-69866d7c48-hr92f                                          1/1     Running   0          12m
    openshift-gitops-application-controller-0                     1/1     Running   0          12m
    openshift-gitops-applicationset-controller-6447b8dfdd-2xqw2   1/1     Running   0          12m
    openshift-gitops-redis-74bd8d7d96-72fmd                       1/1     Running   0          12m
    openshift-gitops-repo-server-c999f75d5-7jfc8                  1/1     Running   0          12m
    openshift-gitops-server-6ff4fbc8f6-fpfdp                      1/1     Running   0          7m47s
    ```

    Once you see the all the pods running, you can proceed!
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-lgph7-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 800
- slug: 02-connecting-to-argocd
  id: flg5wffrvkeo
  type: challenge
  title: Connecting to ArgoCD
  assignment: |
    Now that you've verified that Argo CD is up and running, let's explore
    how to access and manage Argo CD.

    ## Connecting to the Argo CD Server

    Part of the setup of this lab connects you to the Argo CD instance via
    CLI and UI. Let's find the URL for the ArgoCD API Server:

    ```
    oc get routes -n openshift-gitops | grep openshift-gitops-server | awk '{print $2}'
    ```

    Now, let's store this as an enviroment variable so we can use it later to login to ArgoCD through our terminal.

    ```
    export ARGOCD_SERVER_URL=$(oc get routes -n openshift-gitops | grep openshift-gitops-server | awk '{print $2}')
    ```

    Next, find the default password for the `admin` account as follows:

    ```
    oc extract secret/openshift-gitops-cluster -n openshift-gitops --to=-
    ```

    To login from the terminal, execute the following, using the $ARGOCD_SERVER_URL we just saved:

    ```
    argocd login $ARGOCD_SERVER_URL
    ```

    You'll have to accept the self-signed certificate.


    You can login with the following:
    * **Username:** ``admin``
    * **Password:** ``default password from previous command``

    ## The Argo CD Web Console

    You can also find this URL by clicking the shortcut from the Application Launcher tab from the OpenShift Web Console:

    ![ArgoCD UI Shortcut](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/argocd-shortcut.png)

    Once you have accepted the self signed certificate, you should be
    presented with the Argo CD login screen.

    ![ArgoCD Login](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/argocd-login.png)

    You can use the same credentials to login from the UI.

    > **NOTE** The Password is stored in a secret on the platform.

    Once you've logged in, you should see the following page.

    ![ArgoCD](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/argocd.png)

    This is the Argo CD Web UI. Keep this tab open for the next exercise.

    ## ArgoCD Configuration

    Let's come back to the terminal. Verify that you're connected to the Argo CD API server
    by running the following:

    ```
    argocd cluster list
    ```

    You should see output similar to this:

    ```shell
    SERVER                          NAME        VERSION  STATUS   MESSAGE
    https://kubernetes.default.svc  in-cluster           Unknown  Cluster has no application and not being monitored.
    ```

    This output lists the clusters that Argo CD manages. In this case
    `in-cluster` in the `NAME` field signifies that Argo CD is managing the
    cluster it's installed on.

    > **NOTE** You can connect multiple clusters for Argo CD to manage!

    To enable bash completion, run the following command:

    ```
    source <(argocd completion bash)
    ```

    The Argo CD CLI stores it's configuration under `~/.argocd/config`

    > **NOTE** The `argocd cluster add` command used the `~/.kube/config` file to establish connection to the cluster.

    ```
    ls ~/.argocd/config
    ```

    The `argocd` CLI tool is useful for debugging and viewing status of your apps deployed.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-lgph7-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 800
- slug: 03-deploying-sample-application
  id: gmdtqtlq8dhx
  type: challenge
  title: Deploying a Sample Application
  assignment: |-
    In this environment, we have some
    example manifesets taken from our [sample GitOps repo](https://github.com/redhat-developer-demos/openshift-gitops-examples).
    We'll be uisng this repo to test. These manifests include:

    * A **Namespace**: [bgd-ns.yaml](https://raw.githubusercontent.com/redhat-developer-demos/openshift-gitops-examples/main/apps/bgd/overlays/bgd/bgd-ns.yaml)
    * A **Deployment**: [bgd-deployment.yaml](https://raw.githubusercontent.com/redhat-developer-demos/openshift-gitops-examples/main/apps/bgd/overlays/bgd/bgd-deployment.yaml)
    * A **Service**: [bgd-svc.yaml](https://raw.githubusercontent.com/redhat-developer-demos/openshift-gitops-examples/main/apps/bgd/overlays/bgd/bgd-svc.yaml)
    * A **Route**: [bgd-route.yaml](https://raw.githubusercontent.com/redhat-developer-demos/openshift-gitops-examples/main/apps/bgd/overlays/bgd/bgd-route.yaml)

    Collectively, this is known as an `Application` within ArgoCD. Therefore,
    you must define it as such in order to apply these manifest in your
    cluster.

    Open up the Argo CD `Application` manifest: [bgd-app.yaml](https://raw.githubusercontent.com/redhat-developer-demos/openshift-gitops-examples/main/components/applications/bgd-app.yaml)

    Let's break this down a bit.

    * ArgoCD's concept of a `Project` is different than OpenShift's. Here you're installing the application in ArgoCD's `default` project (`.spec.project`). **NOT** OpenShift's `default` project.
    * The destination server is the server we installed ArgoCD on (noted as `.spec.destination.server`).
    * The manifest repo where the YAML resides and the path to look for the YAML is under `.spec.source`.
    * The `.spec.syncPolicy` is set to `false`. Note that you can have Argo CD automatically sync the repo.
    * The last section `.spec.sync` just says what are you comparing the repo to. (Basically "Compare the running config to the desired config")

    The `Application` CR (`CustomResource`) can be applied by running the following:

    ```
    oc apply -f https://raw.githubusercontent.com/redhat-developer-demos/openshift-gitops-examples/main/components/applications/bgd-app.yaml
    ```

    This should create the `bgd-app` in the ArgoCD UI.

    ![bgdk-app](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/bgd-app.png)

    Clicking on this "card" takes you to the overview page. You may see it as still progressing or full synced.

    ![synced-app](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/synced-app.png)

    > **NOTE**: You may have to click on `show hidden resources` on this page to see it all

    At this point the application should be up and running. You can see
    all the resources created with the command:

    ```
    oc get pods,svc,route -n bgd
    ```

    The output should look like this:

    ```shell
    NAME                       READY   STATUS    RESTARTS   AGE
    pod/bgd-788cb756f7-kz448   1/1     Running   0          10m

    NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
    service/bgd   ClusterIP   172.30.111.118   <none>        8080/TCP   10m

    NAME                           HOST/PORT                                PATH   SERVICES   PORT   TERMINATION   WILDCARD
    route.route.openshift.io/bgd   bgd-bgd.apps.example.com          bgd        8080                 None
    ```

    First wait for the rollout to complete

    ```
    oc rollout status deploy/bgd -n bgd
    ```

    Then visit your application using the route by navigating to the URL under the "HOST/PORT" column

    ```
    oc get route -n bgd
    ```

    Your application should look like this.

    ![bgd](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/bgd.png)

    Let's introduce a change! Patch the live manifest to change the color
    of the box from blue to green:

    ```
    oc -n bgd patch deploy/bgd --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/env/0/value", "value":"green"}]'
    ```

    Wait for the rollout to happen:

    ```
    oc rollout status deploy/bgd -n bgd
    ```

    If you refresh your tab where your application is running you should see a green square now.

    ![bgd-green](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/bgd-green.png)

    Looking over at your Argo CD Web UI, you can see that Argo detects your
    application as "Out of Sync".

    ![outofsync](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/out-of-sync.png)

    You can sync your app via the Argo CD by:

    * First clicking `SYNC`
    * Then clicking `SYNCHRONIZE`

    Conversely, you can run

    ```
    argocd app sync bgd-app
    ```

    After the sync process is done, the Argo CD UI should mark the application as in sync.

    ![fullysynced](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/fullysynced.png)

    If you reload the page on the tab where the application is running. It
    should have returned to a blue square.

    ![bgd](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/gitops/bgd.png)

    You can setup Argo CD to automatically correct drift by setting the
    `Application` manifest to do so. Here is an example snippet:

    ```yaml
    spec:
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
    ```

    Or, as in our case, after the fact by running the following command:

    ```
    oc patch application/bgd-app -n openshift-gitops --type=merge -p='{"spec":{"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}'
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-lgph7-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 800
checksum: "5146556526446305375"
