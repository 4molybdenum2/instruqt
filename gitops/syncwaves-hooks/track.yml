challenges:
- assignment: "Welcome! In this section we will be exploring how to use syncwaves\
    \ with\nArgo CD.\n\n## Background\n\nA Syncwave is a way to order how Argo CD\
    \ applies the manifests that are\nstored in git. All manifests have a wave of\
    \ zero by default, but you can\nset these by using the `argocd.argoproj.io/sync-wave`\
    \ annotation. Example:\n\n```yaml\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-wave:\
    \ \"2\"\n```\n\nThe wave can also be negative as well.\n\n```yaml\nmetadata:\n\
    \  annotations:\n    argocd.argoproj.io/sync-wave: \"-5\"\n```\n\nWhen Argo CD\
    \ starts a sync action, the manifest get placed in the following order:\n\n* The\
    \ Phase that they're in (we'll cover phases in the next section)\n* The wave the\
    \ resource is annotated in (starting from the lowest value to the highest)\n*\
    \ By kind (Namspaces first, then services, then deployments, etc ...)\n* By name\
    \ (ascending order)\n\nRead more about syncwaves on the [official documentation\
    \ site](https://argoproj.github.io/argo-cd/user-guide/sync-waves/#how-do-i-configure-waves)\n\
    \n## Exploring Manifests\n\nThe manifests that will be deployed have been annotated\
    \ with the following values:\n\n* The Namspace with `0` `openshift-gitops-examples/apps/welcome-php/overlays/syncwaves/welcome-php-ns.yaml`{{open}}\n\
    * The Deployment with `1` `openshift-gitops-examples/apps/welcome-php/base/welcome-php-deployment.yaml`{{open}}\n\
    * The Service with `2` `openshift-gitops-examples/apps/welcome-php/base/welcome-php-svc.yaml`{{open}}\n\
    * Finally the Route with `3` `openshift-gitops-examples/apps/welcome-php/base/welcome-php-route.yaml`{{open}}\n\
    \nArgo CD will apply the Namespace first (since it's the lowest value),\nand make\
    \ sure it returns a \"healthy\" status before moving on.\n\nNext, the Deployment\
    \ will be applied. After that reports healthy, Argo\nCD will apply the Service\
    \ then the Route.\n\n> **NOTE** Argo CD won't apply the next manifest until the\
    \ previous reports \"healthy\".\n\n## Deploying The Application\n\nBefore we deploy\
    \ this application, make sure you've opened the Argo CD\nWeb Console.\n\nTo get\
    \ to the Argo CD Web UI; click the [Argo CD Web Console](https://openshift-gitops-server-openshift-gitops.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com)\
    \ tab.\n\nOnce you have accepted the self signed certificate, you should be\n\
    presented with the Argo CD login screen.\n\n![ArgoCD Login](https://katacoda.com/openshift/assets/gitops/argocd-login.png)\n\
    \nYou can login with the following\n* **Username:** ``admin``\n* **Password:**\
    \ ```\noc extract secret/openshift-gitops-cluster -n openshift-gitops --to=-\n\
    ```\n\nApply the Argo CD `Application` manifest to get this application deployed.\n\
    \n```\noc apply -f ~/resources/openshift-gitops-examples/components/applications/welcome-syncwaves.yaml\n\
    ```\n\nThis should create the `welcome-syncwaves` application.\n\n![welcome-syncwaves](https://katacoda.com/openshift/assets/gitops/welcome-syncwaves.png)\n\
    \nClicking on this \"card\" will take you to the application overview\npage. Clicking\
    \ on \"show hidden resources\" should expand the \"tree\"\nview.\n\n![welcome-syncwaves-tree](https://katacoda.com/openshift/assets/gitops/welcome-syncwaves-tree.png)\n\
    \nIf you follow along, you'll note that these manfiests get applied in\norder\
    \ of their annotated syncwave!\n\nKeep the Argo CD WebUI tab open for the next\
    \ exercise.\n"
  difficulty: basic
  slug: 01-using-syncwaves
  tabs:
  - hostname: crc-nonest-1
    title: CLI
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: OpenShift Web Console
    type: service
  - hostname: crc-nonest-1
    path: /root
    title: Visual Editor
    type: code
  timelimit: 300
  title: Using Syncwaves
  type: challenge
- assignment: "Now that you're familiar with syncwaves, we can begin exploring applying\n\
    manifests in phases using `resource hooks`.\n\n## Background\n\nControlling your\
    \ sync operation can be futher redefined by using\nhooks. These hooks can run\
    \ before, during, and after a sync\noperation. These hooks are:\n\n* **PreSync**\
    \ - Runs before the sync operation. This can be something like a database backup\
    \ before a schema change\n* **Sync** - Runs after `PreSync` has successfully ran.\
    \ This will run alongside your normal manifesets.\n* **PostSync** - Runs after\
    \ `Sync` has ran successfully. This can be something like a Slack message or an\
    \ email notification.\n* **SyncFail** - Runs if the `Sync` operation as failed.\
    \ This is also used to send notifications or do other evasive actions.\n\nTo enable\
    \ a sync, annotate the specific object manfiest with\n`argocd.argoproj.io/hook`\
    \ with the type of sync you want to use for that\nresource. For example, if I\
    \ wanted to use the `PreSync` hook:\n\n```yaml\nmetadata:\n  annotations:\n  \
    \  argocd.argoproj.io/hook: PreSync\n```\n\nYou can also have the hooks be deleted\
    \ after a successful/unsuccessful run.\n\n* **HookSucceeded** - The resouce will\
    \ be deleted after it has succeeded.\n* **HookFailed** - The resource will be\
    \ deleted if it has failed.\n* **BeforeHookCreation** - The resource will be deleted\
    \ before a new one is created (when a new sync is triggered).\n\nYou can apply\
    \ these with the `argocd.argoproj.io/hook-delete-policy`\nannotation. For example\n\
    \n```yaml\nmetadata:\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n\
    \    argocd.argoproj.io/hook-delete-policy: HookSucceeded\n```\n\n> **NOTE** Since\
    \ a sync can fail in any phase, you can come to a situation where the application\
    \ never reports healthy!\n\nAlthough hooks can be any resource, they are usually\
    \ Pods and/or Jobs.\n\nTo read more about resource hooks, consult the [official\
    \ documentation](https://argoproj.github.io/argo-cd/user-guide/resource_hooks)\n\
    \n## Exploring Manifests\n\nI will be adding the following manifest to the first\n\
    application deployed. Take a look at the manfiest\n`openshift-gitops-examples/apps/welcome-php/overlays/hooks/welcome-php-presync-job.yaml`{{open}}\n\
    \nYou'll see that I have the annotation `argocd.argoproj.io/hook: PreSync`\nset.\
    \ This means that this Job will run in the `PreSync` phase, before\nthe application\
    \ of the manifests in the `Sync` phase.\n\n> **NOTE** Since I don't have a deletion\
    \ policy, this job will \"stick around\" after completion.\n\n## Deploying The\
    \ Application\n\nThis sample will be using `kustomize` to create a new application\
    \ based\non the one we previously deployed; while adding the `Job`\nwith the resource\
    \ hook. You can see this by [visiting the repo](https://github.com/redhat-developer-demos/openshift-gitops-examples/tree/main/apps/welcome-php/overlays/hooks)\n\
    \nTaking a look at the manifest file `openshift-gitops-examples/components/applications/welcome-hooks.yaml`{{open}}\n\
    will show that this will deploy the application in the `welcome-hooks`\nnamespace.\n\
    \nCreate this application ```\noc apply -f ~/resources/openshift-gitops-examples/components/applications/welcome-hooks.yaml\n\
    ```\n\nOn the Argo CD WebUI, you should see another application appear.\n\n![hooks-card](https://katacoda.com/openshift/assets/gitops/hooks-card.png)\n\
    \nClicking on this \"card\" should take you over to the tree view.\n\n![hooks-tree](https://katacoda.com/openshift/assets/gitops/hooks-tree.png)\n\
    \nObserve the sync process. You will see that the `PreSync` manifest has\nan anchor\
    \ icon \u2693 . You will also notice that the other manifests don't\nstart applying\
    \ until the `PreSync` Job is done.\n\nOnce the application is fully synced. Take\
    \ a look at the pods and jobs in\nthe namespace: ```\noc get pods,jobs -n welcome-hooks\n\
    ```\n\nYou should see that the Job is finished, but still there.\n\n```shell\n\
    NAME                               READY   STATUS      RESTARTS   AGE\npod/welcome-php-6986bd99c4-7w7qk\
    \   1/1     Running     0          2m43s\npod/welcome-presyncjob-l9h8n       0/1\
    \     Completed   0          3m14s\n\nNAME                           COMPLETIONS\
    \   DURATION   AGE\njob.batch/welcome-presyncjob   1/1           30s        3m14s\n\
    ```\n\nKeep this tab open, in the next exercise. We will see how to use Syncwaves\n\
    and Hooks in tandem!"
  difficulty: basic
  slug: 02-exploring-resource-hooks
  tabs:
  - hostname: crc-nonest-1
    title: CLI
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: OpenShift Web Console
    type: service
  - hostname: crc-nonest-1
    path: /root
    title: Visual Editor
    type: code
  timelimit: 300
  title: Exploring Resource Hooks
  type: challenge
- assignment: 'Now that you got your hands on syncwaves and resource hooks, you will

    now use them together to see how you can control how your deployment

    rolls out.


    ## Background


    In the previous sections you learned how to order the application

    of manifests using syncwaves. You also went over how you phase your

    deployments with resource hooks.


    In this section we will use syncwaves within each phase to show how you

    can further refine the deployment process.


    Take a look at the following diagram.


    ![resource-wave-hooks](https://katacoda.com/openshift/assets/gitops/resource-hooks.png)


    The workflow can be summarized like this:


    * The `PreSync` phase will run and manifests will be applied in their syncwave
    order.

    * Once the `PreSync` phase is successful, the `Sync` phase begins.

    * The `Sync` phase will apply the manifests in the their syncwave order

    * Finally, after the `Sync` phase is done, the `PostSync` phase applies the manifests
    in the syncwave order.


    ## Exploring Manifests


    Using Kustomize, we will be adding 3 addition manifests.


    * A `PreSync` Job with a syncwave of 0 `openshift-gitops-examples/apps/welcome-php/overlays/syncwaves-and-hooks/welcome-php-presync-job.yaml`{{open}}

    * A `PreSync` Pod with a syncwave of 1 and a hook deletion policy `openshift-gitops-examples/apps/welcome-php/overlays/syncwaves-and-hooks/welcome-php-presync-pod.yaml`{{open}}

    * A `PostSync` Pod with a hook deletion policy `openshift-gitops-examples/apps/welcome-php/overlays/syncwaves-and-hooks/welcome-php-postsync-pod.yaml`{{open}}


    The manifest will apply in the following order.


    * `PreSync` - The Job will start and finish. The the Pod will start and finish.
    Once these are both done successfully the `PreSync` phase is considered "done".

    * `Sync` - All the manifests will apply in their respective syncwave order. Once
    this is done successfully, the `Sync` phase is considered done.

    * `PostSync` - The Pod will start and finish. Once it''s successfully finished,
    the resource is deleted.



    ## Deploying the Application


    Take a look at the manifest file `openshift-gitops-examples/components/applications/welcome-syncwaves-and-hooks.yaml`{{open}}


    As before, we are using Kustomize to deploy the same application,

    but in a different namespace and we are loading in the 3 additional

    manifests. You can see the specific implementation in the [git repo](https://github.com/redhat-developer-demos/openshift-gitops-examples/tree/main/apps/welcome-php/overlays/syncwaves-and-hooks)


    Create this application ```

    oc apply -f ~/resources/openshift-gitops-examples/components/applications/welcome-syncwaves-and-hooks.yaml

    ```


    This should create the 3rd application on Argo CD.


    ![waves-and-hooks-card](https://katacoda.com/openshift/assets/gitops/waves-and-hooks-card.png)


    Clicking on this card should take you to the tree view.


    ![waves-and-hooks-tree](https://katacoda.com/openshift/assets/gitops/waves-and-hooks-tree.png)


    Here you can observe the sync process happening in the order

    specified. You will also note that the `PreSync` Pod and the `PostSync`

    pod were deleted after the sync process because of the deletion policy

    annotation.


    Take a look to verify: ```

    oc get pods,jobs -n welcome-waves-and-hooks

    ```


    You should see the following output.


    ```shell

    NAME                               READY   STATUS      RESTARTS   AGE

    pod/welcome-php-6986bd99c4-vv499   1/1     Running     0          4m52s

    pod/welcome-presyncjob-8jtqj       0/1     Completed   0          5m24s


    NAME                           COMPLETIONS   DURATION   AGE

    job.batch/welcome-presyncjob   1/1           18s        5m24s

    ```

    '
  difficulty: basic
  slug: 03-using-syncwaves-and-hooks
  tabs:
  - hostname: crc-nonest-1
    title: CLI
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: OpenShift Web Console
    type: service
  - hostname: crc-nonest-1
    path: /root
    title: Visual Editor
    type: code
  timelimit: 300
  title: Using Syncwaves and Hooks Together
  type: challenge
description: '## Goal


  This scenario will get you get familiar with syncwaves and hook phases.



  ## Concepts


  [Syncwaves](https://argoproj.github.io/argo-cd/user-guide/sync-waves/)

  are used in Argo CD to order how manifests

  are applied to the cluster. Whereas [resource hooks](https://argoproj.github.io/argo-cd/user-guide/resource_hooks/)

  breaks up the delivery of these manifests in different phases.


  ![ArgoCD Logo](https://katacoda.com/openshift/assets/gitops/argocd-logo.png)


  [Argo CD](https://argoproj.github.io/argo-cd/) is a declarative, GitOps continuous
  delivery tool for Kubernetes.


  Using a combination of syncwaves and resource hooks, you can control how your application
  rolls out.


  ## Use case


  This is a simple guide that takes you through the following steps:


  * Using Syncwaves to order deployment

  * Exploring Resource Hooks

  * Using Syncwaves and Hooks together


  This OpenShift cluster will self-destruct in one hour.

  '
developers:
- btannous@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: openshift
private: true
published: false
skipping_enabled: false
slug: gitops-syncwaves-hooks
tags:
- openshift
title: Syncwaves and Hooks
type: track
