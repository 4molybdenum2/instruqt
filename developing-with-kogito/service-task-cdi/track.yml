challenges:
- assignment: "In this step, you will create the Kogito application skeleton.\n\n\
    # The Project\n\nYou start with a basic Maven-based Kogito application which has\
    \ been generated from the Kogito Maven Archetype.\n\n# The Application You Will\
    \ Build\n\nThe application is a simple text processor application that will convert\
    \ the passed text to uppercase.\n\nYou will implement logic that converts the\
    \ text to uppercase in a CDI bean.\n\nLet's get started.\n\n# Create a basic project\n\
    \nThe easiest way to create a new Kogito project is to execute the Maven command\
    \ below by clicking on it:\n\n`mvn archetype:generate \\\n  -DinteractiveMode=false\
    \ \\\n  -DarchetypeGroupId=org.kie.kogito \\\n  -DarchetypeArtifactId=kogito-quarkus-archetype\
    \ \\\n  -DarchetypeVersion=0.9.0 \\\n  -DgroupId=org.acme \\\n  -DartifactId=service-task-cdi\
    \ \\\n  -Dversion=1.0-SNAPSHOT`{{execute}}\n\nThis will use the Kogito Maven Archetype\
    \ and generate a basic Maven project for you in the `service-task-cdi` subdirectory.\n\
    \n# BPMN2 Process Definition\n\nThe default Kogito application contains a sample\
    \ process called `test-process.bpmn2`. We will use this file as the base of our\
    \ project.\n\nClick on the following link to open the [Kogito Online Tooling]\
    \ with our test process: https://kiegroup.github.io/kogito-online/?file=https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/archetypes/kogito-quarkus-archetype/src/main/resources/archetype-resources/src/main/resources/test-process.bpmn2#/editor/bpmn2\n\
    \nWe will use this process definition as the base of our application.\n\n# Running\
    \ the Application\n\nWe will now run the Kogito application in development mode.\
    \ This allows us to keep the application running while implementing our application\
    \ logic. Kogito and Quarkus will _hot reload_ the application when it is acccessed\
    \ and changes have been detected.\n\n```\ncd /root/projects/kogito/service-task-cdi\n\
    ```\n\n```\nmvn clean compile quarkus:dev\n```\n\nWhen the application has started,\
    \ you can access the [Swagger UI](https://[[CLIENT_SUBDOMAIN]]-8080-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui).\n\
    \nYou should see the following page:\n\n![New Kogito Quarkus Web Page](/openshift/assets/middleware/middleware-kogito/new-kogito-quarkus-swagger-ui.png)\n\
    \nIt's working!\n\n\n# Congratulations!\n\nYou've seen how to create the skeleton\
    \ of basic Kogito app, and open the base process definition in the [Kogito Online\
    \ Tooling](https://kiegroup.github.io/kogito-online/#/). Finally, you've started\
    \ the application in _Quarkus dev-mode_.\n\nIn the next step we'll add a CDI bean\
    \ that implements our text processing logic.\n"
  difficulty: basic
  slug: 01-create-project
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Step 1
  type: challenge
- assignment: "In the previous step you've created a skeleton Kogito application with\
    \ Quarkus and opened a simple BPMN file with the [Kogito Online Tooling](https://kiegroup.github.io/kogito-online/#/).\
    \ In this step we'll create the CDI bean that implements the functionality of\
    \ our BPMN2 _Service Task_.\n\n## Create a CDI bean.\n\nTo create a new CDI bean,\
    \ we simply create a new Java file in our `src/main/java/org/acme` folder.\n\n\
    Open a new Java file by clicking: `service-task-cdi/src/main/java/org/acme/TextProcessor.java`{{open}}\n\
    \nWe can now add the class definition to our Java file. Click on the _Copy to\
    \ Editor_ link to copy the content below to the file you've just created.\n\n\
    <pre class=\"file\" data-filename=\"./service-task-cdi/src/main/java/org/acme/TextProcessor.java\"\
    \ data-target=\"replace\">\npackage org.acme;\n\nimport javax.enterprise.context.ApplicationScoped;\n\
    \n/**\n * TextProcessor\n */\n//Add CDI annotation here\npublic class TextProcessor\
    \ {\n\n//Add toUpper method here\n\n}\n</pre>\n\n\nFirst, we want to implement\
    \ our logic. Our process needs to convert all text that is passed to it to uppercase.\n\
    Therefore, we create a method that accepts a `String` as input, and returns the\
    \ converted `String` as its output.\nWe will call the method `toUpper`.\n\n<pre\
    \ class=\"file\" data-filename=\"./service-task/src/main/java/org/acme/TextProcessor.java\"\
    \ data-target=\"insert\" data-marker=\"//Add toUpper method here\">\n  public\
    \ String toUpper(String text) {\n    return text.toUpperCase();\n  }\n</pre>\n\
    \nFinally, we need to add the `@ApplicationScoped` CDI annotation to turn our\
    \ Java bean into a CDI bean.\n\n<pre class=\"file\" data-filename=\"./service-task/src/main/java/org/acme/TextProcessor.java\"\
    \ data-target=\"insert\" data-marker=\"//Add CDI annotation here\">\n@ApplicationScoped</pre>\n\
    \nSince we still have our app running using `mvn quarkus:dev`, when you make these\
    \ changes and reload the endpoint, Quarkus will notice all of these changes and\
    \ live-reload them.\n\n\n## Congratulations!\n\nYou've implemented a CDI bean\
    \ in your Kogito application that can be used as the implementation of a BPMN2\
    \ _Service Task_.\n"
  difficulty: basic
  slug: 02-implement-cdi-bean
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Step 2
  type: challenge
- assignment: 'In the previous step you added a CDI bean to your Kogito application.
    Now it''s time to implement the process and use this bean from a _Service Task_.


    ## Open the BPMN2 process


    Go back to the Kogito Online editor with the sample process we opened earlier,
    or re-open it by clicking on the following link: https://kiegroup.github.io/kogito-online/?file=https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/archetypes/kogito-quarkus-archetype/src/main/resources/archetype-resources/src/main/resources/test-process.bpmn2#/editor/bpmn2


    ## Change Process Name.


    We will first change the _name_ and _id_ of the process. This, among other things,
    controls the name of the RESTful resource (URL) that will be generated for this
    process by Kogito.


    In the BPMN editor, click on the pencil icon in the upper-right corner to open
    the properties panel.


    ![BPMN Editor Properties Panel](/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-bpmn-editor-open-properties-panel.png)


    Change the _Name_ and _ID_ of the process to `text_processor`.


    ![Process Name](/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-process-name.png)


    ## Add Process Variable


    Our application''s functionality is to take an input `String` and convert it to
    uppercase. So, our process definition requires a process variable of type `String`
    to carry the data through the process.


    Scroll down in the properties panel until you see the section _Process Data_.
    Expand this section and click on the _+_ sign to add a new process variable. Give
    the variable the name `mytext` and the type `String`. Leave the _KPI_ checkbox
    unchecked.


    ![Process Variable](/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-process-variable.png)


    ## Create Service Task


    In the diagram, double-click on the `Hello` _Script Task_ to change the name of
    the node. Change the name to `Process Text`.


    ![Process Text Node](/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-process-text-node.png)


    Next, we need to change the node from a _Script Task_ to a _Service Task_. To
    do this, click on the node, hoover over the gear icon in the lower-left corner
    of the node, and select _Convert into Service Task_ in the menu.


    ![Convert Into Service Task](/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-convert-into-service-task.png)


    ## Configuring the Service Task


    We can now configure the _Service Task_ so that it calls the `toUpper` method
    of our `TextProcessor` CDI bean, pass the `mytext` process variable to it, and
    map the result back. To do this, select the `Process Text` _Service Task_, and
    open the properties panel on the right side of the screen. Expand the _Implementation/Execution_
    section. Set the following values:


    * Implementation: `Java`

    * Interface: `org.acme.TextProcessor`

    * Operation: `toUpper`


    ![Service Task Implementation](/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-service-task-implementation.png)


    With the implementation configuration set, we can now configure the data _Assignments_.
    In the properties panel, click on the pencil icon in the _Assignments_ section.
    In the form that opens, add the following _input_ and _output_ data assignments.


    ![Service Task Data Assignment](/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-service-task-data-assignment.png)


    Note that the _Name_ of the input assignment is the name of the `toUpper` method
    argument in our `TextProcessor` CDI bean.


    We have now implemented our process definition. It''s time to copy it to our project.
    Click on the _File Actions_ button in the top-right corner of the BPMN editor.
    In the drop-down menu, click on _Copy source_. This will copy the source of your
    BPMN diagram to your clipboard.


    Open the `test-process.bpmn2` file by clicking: `service-task-cdi/src/main/resources/test-process.bpmn2`{{open}}


    Clear the file''s content, and paste the BPMN2 definition that''s in your clipboard
    to the file (right-click and select "Paste", or use Ctrl+V or Command+V, depending
    on your operating system).


    ## Test the process


    Because we''re using the hot-reload functionality of Kogito and Quarkus, we don''t
    need to recompile and restart our application after we''ve implemented our functionality.
    We can simply send a new request, and the application will hot/live reload and
    serve the request. With the following request, we send the text `hello` to our
    process:


    `curl -X POST "http://localhost:8080/text_processor" -H "accept: application/json"
    -H "Content-Type: application/json" -d "{ \"mytext\": \"hello\"}"`{{execute T2}}


    As we can see from the response, the text is converted to uppercase.


    ## Congratulations!


    In this scenario you''ve implemented the logic of a BPMN _Service Task_ node using
    CDI. There is much more to Kogito than CDI and hot-reload, so keep on exploring
    additional scenarios to learn more, and be sure to visit [kogito.kie.org](https://kogito.kie.org)
    to learn even more about the architecture and capabilities of this exciting new
    framework for Cloud Native Business Automation.

    '
  difficulty: basic
  slug: 03-implement-the-process
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Step 3
  type: challenge
developers:
- btannous@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: openshift
private: false
published: true
skipping_enabled: false
slug: service-task-cdi
tags:
- openshift
title: Kogito and CDI
type: track
