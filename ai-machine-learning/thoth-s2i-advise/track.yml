challenges:
- assignment: "Before you get started we recommend reading the following steps. They\
    \ explain\na bit about how the playground environment is setup and what access\
    \ you have.\n\n## Logging in to the Cluster via Dashboard\n\nClick the [Console](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com)\
    \ tab to open the dashboard. \n\nYou will then able able to login with admin permissions\
    \ with:\n\n* **Username:** ``developer``\n* **Password:** ``developer``\n\n##\
    \ Logging in to the Cluster via CLI\n\nWhen the OpenShift playground is created\
    \ you will be logged in initially as\na cluster admin (```\noc whoami\n```) on\
    \ the command line. This will allow you to perform\noperations which would normally\
    \ be performed by a cluster admin.\n\nBefore creating any applications, it is\
    \ recommended you login as a distinct\nuser. This will be required if you want\
    \ to log in to the web console and\nuse it.\n\nTo login to the OpenShift cluster\
    \ from the _Terminal_ run:\n\n```\noc login -u developer -p developer\n```\n\n\
    This will log you in using the credentials:\n\n* **Username:** ``developer``\n\
    * **Password:** ``developer``\n\nUse the same credentials to log into the web\
    \ console.\nFor simplicity we are logging in here as admin.\n\n## Creating your\
    \ own Project\n\nTo create a new project called ``myproject`` run the command:\n\
    \n```\noc new-project myproject\n```\n\nYou could instead create the project from\
    \ the web console. If you do this,\nto change to the project from the command\
    \ line run the command:\n\n```\noc project myproject\n```\n\nNow that you have\
    \ created your own project, me move to the next\nstep. "
  difficulty: intermediate
  slug: setup
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Getting Started
  type: challenge
- assignment: "Before we explore more about the build process, let's check the sample\
    \ repo we have for the demo,\nand explore more about the s2i process. \n\nHere\
    \ is the example repo we are going to try today - \n\n[https://github.com/thoth-station/s2i-example](https://github.com/thoth-station/s2i-example)\n\
    \nNow let's check out the `log-thoth` branch.\nThe upstream link to the same is\
    \ - [https://github.com/thoth-station/s2i-example/tree/log-thoth](https://github.com/thoth-station/s2i-example/tree/log-thoth)\n\
    \nIf you go to app.py, it's a simple Python app that prints `Hello thoth` every\
    \ 10 seconds. \nAnd you have a Pipfile that has `daiquiri` as the only package.\
    \ That is the standard python project, we are going to experiment with. \n\nNow\
    \ let's explore the `openshift.yaml`. \nEnd of the yaml, we declare the image\
    \ to be `s2i-thoth-ubi8-py38`\n```\n  - apiVersion: \"image.openshift.io/v1\"\n\
    \    kind: ImageStream\n    metadata:\n      labels:\n        app: \"s2i-example-log\"\
    \n      name: \"s2i-thoth-ubi8-py38\"\n    spec:\n      tags:\n        - name:\
    \ \"latest\"\n          from:\n            kind: \"DockerImage\"\n           \
    \ name: \"quay.io/thoth-station/s2i-thoth-ubi8-py38\"\n          referencePolicy:\n\
    \            type: \"Source\"\n```\nAnd we use this under BuildConfig under line\
    \ 26, stating our source repo to be - \n```\ngit:\n    uri: \"https://github.com/thoth-station/s2i-example\"\
    \n    ref: \"log-thoth\"\n```\nYou could change this to point to your repo fork.\n\
    Now that we have successfully explored the repo, and are using a Thoth powered\
    \ s2i image, let's explore some configuration options, that \nthoth image provides\
    \ out of box. "
  difficulty: intermediate
  slug: app
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Getting the sample Python app
  type: challenge
- assignment: "Now finally let's explore the options Thoth s2i build image offers\
    \ - \n\nThoth\u2019s s2i container images can be configured using environment\
    \ variables supplied to the build config:\n\n`THOTH_ADVISE` - always use the recommended\
    \ stack by Thoth (even if Pipfile.lock is present in the repo)\n\n`THOTH_PROVENANCE_CHECK`\
    \ - verify stack provenance - the provenance check is triggered only if the lock\
    \ file is not comming from Thoth\u2019s recommendation engine (otherwise the stack\
    \ has already verified provenance)\n\n`THOTH_ASSEMBLE_DEBUG` - run s2i\u2019s\
    \ assemble script in verbose mode\n\n`THOTH_DRY_RUN` - submit stack to Thoth\u2019\
    s recommendation engine but do not use the recommended Pipfile.lock file, use\
    \ the Pipfile.lock file present in the repo instead\n\n`THOTH_FROM_MASTER` - Use\
    \ Thamos from git instead of a PyPI release - handy if the released Thamos has\
    \ a bug which was fixed in the master branch\n\n`THOTH_HOST` - Thoth\u2019s host\
    \ to reach out to for recommendations (defaults to prod deployment at khemenu.thoth-station.ninja)\n\
    \n`THOTH_ERROR_FALLBACK` - fallback to the Pipfile.lock present in the repository\
    \ if the submitted Thoth analysis fails\n\nIf you go checkout the `openshift.yaml`\
    \ and checkout the env block under BuildConfig (ln 57), you will see some of these\
    \ being used like `THAMOS_ADVISE`, `THOTH_DRY_RUN`, `THOTH_HOST`.\nThamos Host\
    \ is currently set to `api.moc.thoth-station.ninja`, which is our public facing\
    \ api. \nAnd `THAMOS_ADVISE` set to 1, that uses the stack recommended, this would\
    \ allow us \nto use to Thoth recommended build in the s2i build process. \nFor\
    \ this tutorial we are going to focus on `THAMOS_ADVISE`, hence provenance check\
    \ is set to 0. \n\n\nHere are some config option's that you could configure, which\
    \ \nchanges the behaviour of `THAMOS` (the cli tool used to interact with Thoth\
    \ internally.) \n - https://thoth-station.ninja/docs/developers/thamos/\n\nYou\
    \ can see them being used in the sample `openshift.yaml` in your repo, feel free\
    \ to try tinkering with them according to your need."
  difficulty: intermediate
  slug: parameter
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Thoth s2i parameters
  type: challenge
- assignment: "Now that you are familiar with the configurations our s2i image offers,\
    \ let's try deploying our sample app using Thoth's S2I build process. \n\nAssuming\
    \ you have followed the steps from before and are logged in as an admin into `myproject`\
    \ in the openshift cluster lets deploy - \n\nYou can try deploying our version\
    \ using - \n\n```\noc process -f https://raw.githubusercontent.com/thoth-station/s2i-example/log-thoth/openshift.yaml\
    \ | oc apply -f -\n```\n\n\n\n\nNow that you have scheduled it in the katacoda\
    \ terminal on the right, you should see this - \n```\nbuildconfig.build.openshift.io/s2i-example-log\
    \ created\ndeploymentconfig.apps.openshift.io/s2i-example-log created\nimagestream.image.openshift.io/s2i-example-log\
    \ created\nimagestream.image.openshift.io/s2i-thoth-ubi8-py38 created\n```\n\n\
    ### Let's go to Openshift UI and checkout our build process - \n\nMake sure you\
    \ have selected `myproject` on the project selector. \nIf you go to Builds in\
    \ the Openshift UI in the other tab, under `Builds`, you would see `s2i-example-log`\
    \ and under logs you could inspect the build process. \nYou would see `thamos\
    \ advise` being run on your stack and if there is a suggestion. \nIncase the analysis\
    \ fails, we resort to the existing Pipfile.lock to prevent the build from failing.\
    \ \n\nNow lets check the logs - \n\n```\noc logs bc/s2i-example-log -f\n```\n\n\
    You should keep a eye for these things in the log - \n - Thoth's configuration\
    \ file after hardware and software discovery (that's the .thoth.yaml being expanded\
    \ from the template.)\n - Asking Thoth for advise... (That is where thamos interacts\
    \ with Thoth API)\n\nNow if you check the UI, your app should be running under\
    \ `Workloads -> Pods`.\n\nOnce the application is deployed, you can check the\
    \ logs from the deployed app using - \n\n```\noc logs -f bc/s2i-example-log\n\
    ```\n\nAfter Thoth finishes processing your stack you should see something similar\
    \ to this in your report - \n![thoth advise pass](https://raw.githubusercontent.com/saisankargochhayat/katacoda-scenarios/master/hello-world/assets/thamos_advise_pass.png)\n\
    \nIf you want to remove the app from the cluster - \n\n```\noc delete all --selector\
    \ 'app=s2i-example-log'\n```"
  difficulty: intermediate
  slug: deploy
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Let's Deploy
  type: challenge
description: "In this tutorial, we are going to build a simple Python app, using Thoth\
  \ s2i.\nThus getting intelligent recommendation on the software stack during the\
  \ build process.\n\n## Why to use Thoth s2i build process?\n\nFor those who are\
  \ new to this [Source-to-Image(s2i)](https://docs.openshift.com/container-platform/latest/openshift_images/using_images/using-s21-images.html)\
  \ refers to the Source to image process which\nbundles your source code to a image\
  \ that can be run on OpenShift. \n\nSo when you use, Thoth s2i build process instead\
  \ of the normal s2i build process, \nThoth produces recommendations targeting your\
  \ specific hardware configuration you \nuse to run your application inside the cluster\
  \ (e.g. specific GPU available in \nthe cluster).\n\nYou can find a list of base\
  \ images which you can use with Thoth in [s2i-thoth repository](https://github.com/thoth-station/s2i-thoth)\
  \ \nwith detailed instructions on how to use Thoth in the OpenShift\u2019s s2i process.\
  \ \nThe container images are hosted at - \n[quay.io](quay.io/organization/thoth-station)\
  \ with the \nprefix s2i.\n\nWe are going to discover more about it in the next step\
  \ how you can customize the process.\n\nIn this demo, we are going to use an Openshift\
  \ 4.7 playground.<br>\nWe are operating our services on the MassOpen.cloud [#operatefirst](https://massopen.cloud/connected-initiatives/operate-first)"
developers:
- btannous@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: openshift
private: true
published: false
skipping_enabled: false
slug: thoth-s2i-advise
tags:
- openshift
title: Thoth S2I build with Advise on OpenShift
type: track
