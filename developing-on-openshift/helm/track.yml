challenges:
- assignment: "At the end of this chapter you will be able to:\n- Use `helm` CLI\n\
    - Install `helm repository`\n- Search, install and uninstall `Helm Charts`\n-\
    \ Review Helm Charts from `OpenShift Console`\n\n## Helm\_Command Line Interface\
    \ (CLI)\n\nIn this scenario you will find the Helm CLI already installed for you,\
    \ which can be  also retrieved from OpenShift Console, top right corner, click\
    \ on ? -> Command Line Tools.\n\nThe CLI is the entry point for any interaction\
    \ with Helm 3 subsystem. In addition to that, OpenShift Developer Catalog, which\
    \ is the central hub for all developer content, has support for Helm Charts in\
    \ addition to Operator-backed services, Templates, etc.\n\nWhen a user instructs\
    \ the Helm CLI to install a Helm Chart, the information about the Helm Chart is\
    \ fetched from the repository, rendered on the client and then applied to Kubernetes\
    \ while a record of this installation is created within the namespace (which is\
    \ known as a Release).\n\n![Helm on OpenShift](https://katacoda.com/openshift/assets/developing-on-openshift/helm/helm-diagram.png)\n\
    \n\n## Logging in to the Cluster\n\nTo login to the OpenShift cluster from the\
    \ Terminal run:\n\n```\noc login -u developer -p developer\n```\n\nThis will log\
    \ you in using the credentials:\n\n* **Username:** ``developer``\n* **Password:**\
    \ ``developer``\n\nUse the same credentials to log into the Web Console.\n\nCreate\
    \ a new OpenShift Project to have a namespace for our  helm charts to work with.\n\
    \n```\noc new-project helm\n```\n\n## Exercise: Explore CLI\nLet's get started\
    \ by using `helm` getting CLI version :\n\n```\nhelm version\n```\n\nThis should\
    \ confirm we are using **Helm 3**.\n\nAs discussed in the previous step, Helm\
    \ Charts are available through repositories, and those can be pre-installed or\
    \ installable by the user.\n\nYou can search for Helm Charts available in any\
    \ public repositories through [Helm Hub](https://hub.helm.sh/).\n\nFor instance,\
    \ searching Helm Charts for [NGINX](https://nginx.com):\n\n```\nhelm search hub\
    \ nginx\n```\n\nThis will give a list of available charts from multiple repositories.\
    \ If we want to install it, we need to have such repositories configured.\n\n\n\
    By default the list of available repositories is empty. You can add a new one\
    \ with the CLI. For NGINX, add Bitnami repository:\n\n```\nhelm repo add bitnami\
    \ https://charts.bitnami.com/bitnami\n```\n\nOnce added, verify it is present:\n\
    \n```\nhelm repo list\n```\n\nYou can search for Helm Charts also inside repos,\
    \ like in the one you just installed:\n\n```\nhelm search repo bitnami/nginx\n\
    ```\n\n## Deploy a Helm Chart\n\nYou can use `helm install` command to deploy\
    \ your charts and start managing revisions.\n \nTo install [NGINX Chart](https://hub.helm.sh/charts/bitnami/nginx):\n\
    \n```\nhelm install my-nginx bitnami/nginx --set service.type=ClusterIP\n```\n\
    \nThis will install `nginx`, and for this example, we want to use `ClusterIP`\
    \ Service type because we want to expose it afterwards through an OpenShift `Route`.\n\
    \nCheck your Helm releases:\n\n```\nhelm ls\n```\n\nVerify all the pods are in\
    \ Running state and Ready:\n\n```\noc get pods\n```\n\nNow expose `my-nginx` service\
    \ to access it via OpenShift `Route`:\n\n```\noc expose svc/my-nginx\n```\n\n\
    Verify that route has been created:\n\n```\noc get routes\n```\n\nYou can click\
    \ on the generated host to access the NGINX Pod provided by your just installed\
    \ Helm Chart, or you can do it from OpenShift Console.\n\n## Verify the deployment\
    \ from OpenShift Console\n\nTo verify the creation of the resources generated\
    \ by the Helm Chart, you can head out to the OpenShift web console.\n\nYou can\
    \ make your way to the web console by clicking on the Console tab next to the\
    \ Terminal tab at the center top of the workshop in your browser.\n\nYou need\
    \ to log in with username `developer` and password `developer`.\n\nMake sure the\
    \ Developer perspective from the dropdown in the top left corner of the web console\
    \ is selected as shown below:\n\n<img src=\"../../assets/middleware/pipelines/developer-view.png\"\
    \ width=\"800\" />\n\nNext, select the Project dropdown menu shown below and choose\
    \ `helm` project you have been working with.\n\nNext, click on the Topology tab\
    \ on the left side of the web console if you don't see what's in the image below.\
    \ Once in the Topology view, you can see the Deployment for `my-nginx` application\
    \ and you can access it by clicking on the URL generated by the OpenShift Route:\n\
    \n<img src=\"../../assets/developing-on-openshift/helm/nginx-helm-chart-route.png\"\
    \ width=\"800\" />\n\nYou'll notice the HR label and Helm icon below, this means\
    \ that this application is managed by Helm, and you can overview Helm `Releases`\
    \ for this app from left side menu, Helm section:\n\n<img src=\"../../assets/developing-on-openshift/helm/nginx-helm-releases.png\"\
    \ width=\"800\" />\n\nExplore all `Resources` that are associated with a particular\
    \ Helm `Release`, click on `my-nginx` Helm Release and then click on `Resouces`\
    \ tab:\n\n<img src=\"../../assets/developing-on-openshift/helm/nginx-helm-resources-view.png\"\
    \ width=\"800\" />\n\n\n# Uninstall and clean\n\nCome back to Terminal clicking\
    \ on Terminal tab.\n\nUninstall `my-nginx` release:\n\n```\nhelm uninstall my-nginx\n\
    ```\n\nDelete previously created `route`:\n\n```\noc delete route my-nginx\n```\n\
    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  difficulty: basic
  slug: 01-cli
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Explore Helm CLI
  type: challenge
- assignment: "At the end of this chapter you will be able to:\n- Create your own\
    \ `Helm Chart`\n- Understand `Helm Templates`\n- Understand Helm integrations\
    \ with `Kubernetes`\n\n\nAfter having discovered `helm` CLI to install and manage\
    \ Helm Charts, we can now create our first one from scratch. Before doing that,\
    \ let's review the core concepts from [official documentation](https://helm.sh/docs/topics/charts/):\n\
    \n- A `Chart` is a Helm package. It contains all of the resource definitions necessary\
    \ to run an application, tool, or service inside of a Kubernetes cluster.\n- A\
    \ `Repository` is the place where charts can be collected and shared.\n- A `Release`\
    \ is an instance of a chart running in a Kubernetes cluster- \n\n\nHelm uses a\
    \ packaging format called charts. A chart is a collection of files that describe\
    \ a related set of Kubernetes resources, and it organized as a collection of files\
    \ inside of a directory. The directory name is the name of the chart.\n\n## Creating\
    \ a new Helm Chart\n\nWith `helm create` command you can create a chart directory\
    \ along with the common files and directories used in a chart.\n\n\nOur code has\
    \ been already generated with this command:\n\n`helm create my-chart`\n\n\nInside\
    \ `my-chart/` folder you will find these files:\n\n```\ntree my-chart\n```\n\n\
    * `Chart.yaml`{{open}}: is a YAML file containing multiple fields describing the\
    \ chart\n* `values.yaml`{{open}}:: is a YAML file containing default values for\
    \ a chart, those may be overridden by users during helm install or helm upgrade.\n\
    * `templates/NOTES.txt`{{open}}: text to be displayed to your users when they\
    \ run helm install.\n* `templates/deployment.yaml`{{open}}: a basic manifest for\
    \ creating a Kubernetes deployment\n* `templates/service.yaml`{{open}}: a basic\
    \ manifest for creating a service endpoint for your deployment\n* `templates/_helpers.tpl`{{open}}:\
    \ a place to put template helpers that you can re-use throughout the chart\n\n\
    This command generates a skeleton of your Helm Chart, and by default there is\
    \ an NGINX image as example:\n\n\n**1. Chart description**\n\nLet's review our\
    \ `Chart.yaml`{{open}}. This contains `version` of the package and `appVersion`\
    \ that we are managing, typically this can be refered to a container image tag.\n\
    \n\n**2. Fill chart with custom values**\n\nIn our example, we are working on\
    \ a Helm Template `templates/deployment.yaml`{{open}} describing a Kubernetes\
    \ Deployment for our app, containing this structure for `spec.containers.image`:\n\
    \n`image: \"{{ .Values.image.repository }}:{{ .Values.image.tag }}\"`\n\n> **Note:**\
    \ *By default `appVersion` from `Chart.yaml` is used as image tag*\n\n\nIn `values.yaml`{{open}}\
    \ add `image.repository` variable to define the container image for our chart.\
    \ Click the **Copy to Editor** button below to place this code in `values.yaml`{{open}}:\n\
    \n<pre class=\"file\" data-filename=\"values.yaml\" data-target=\"insert\" data-marker=\"\
    # TODO: image repository\">repository: bitnami/nginx</pre>\n\n\nNow let's define\
    \ which tag to use for this container image. Click the **Copy to Editor** button\
    \ below to place this code in `values.yaml`{{open}}:\n\n<pre class=\"file\" data-filename=\"\
    values.yaml\" data-target=\"insert\" data-marker=\"# TODO: image tag\">tag: latest</pre>\n\
    \n\n**3. Install**\n\nInstall our custom Helm Chart from local folder.\n\n```\n\
    helm install my-chart ./my-chart\n```\n\nThis will install NGINX like in previous\
    \ chapter, and we can follow installation like in previous chapter, either from\
    \ Terminal or OpenShift Console:\n\n```\noc get pods\n```\n\n<img src=\"../../assets/developing-on-openshift/helm/my-chart-helm-chart.png\"\
    \ width=\"800\" />\n\nReview installed revision:\n\n```\nhelm ls\n```\n\nIn next\
    \ chapter we will add an OpenShift Route as a Helm Template, like for `Service`,\
    \ to be published in a new revision.\n"
  difficulty: basic
  slug: 02-first-chart
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Create your first Helm Chart
  type: challenge
- assignment: "At the end of this chapter you will be able to:\n- Manage multiple\
    \ `Helm Revisions` for your Helm Chart\n- `Upgrade` revisions for new changes\n\
    - Revert changes with `Rollback` of revisions\n\n## Upgrade revisions\n\nWhen\
    \ we install a Helm Chart on OpenShift, we publish a release into the cluster\
    \ that we can control in terms of upgrades and rollbacks.\n\nTo change something\
    \ in any already published chart, we can use `helm upgrade` command with new parameters\
    \ or code from our chart.\n\n## Add OpenShift Route as Template\n\nCreate a new\
    \ template for OpenShift Route in `templates` directory, click on `templates/routes.yaml`{{open}}\
    \ to create one. Click the **Copy to Editor** button below to place this code\
    \ in `templates/routes.yaml`{{open}}\n<pre class=\"file\" data-filename=\"templates/routes.yaml\"\
    \ data-target=\"replace\">\napiVersion: route.openshift.io/v1\nkind: Route\nmetadata:\n\
    \  name: {{ include \"my-chart.fullname\" . }}\n  labels:\n    {{- include \"\
    my-chart.labels\" . | nindent 4 }}\nspec:\n  port:\n    targetPort: http\n  to:\n\
    \    kind: Service\n    name: {{ include \"my-chart.fullname\" . }}\n    weight:\
    \ 100\n  wildcardPolicy: None\n</pre>\n\nRun `helm upgrade` to publish a new revision\
    \ containing a `my-charm` Route:\n\n```\nhelm upgrade my-chart ./my-chart\n```\n\
    \nVerify new `Route` from Terminal:\n\n```\noc get routes\n```\n\nVerify new `Revision`:\n\
    \n```\nhelm ls\n```\n\nVerify new `Route` and new `Revision` from Console:\n\n\
    <img src=\"../../assets/developing-on-openshift/helm/my-chart-helm-chart-route.png\"\
    \ width=\"800\" />\n\n<img src=\"../../assets/developing-on-openshift/helm/my-chart-new-revision.png\"\
    \ width=\"800\" />\n\n\n## Upgrade and Rollback\n\nLet's update again our existing\
    \ release overriding values in `values.yaml` changing `image.pullPolicy` from\
    \ chart's default value `IfNotPresent` to `Always`, using same method we adopted\
    \ previously for changing `service.type` with option `--set`:\n\n```\nhelm upgrade\
    \ my-chart ./my-chart --set image.pullPolicy=Always\n```\n\nLet's verify that\
    \ our changes is reflected into resulting `Deployment`:\n\n```\noc get deployment\
    \ my-chart -o yaml | grep imagePullPolicy\n```\n\nGet current `Revision`:\n\n\
    ```\nhelm ls\n```\n\nNow that our new release is published and verified, we can\
    \ decide to rollback to previous version if we need to, and this is possible with\
    \ `helm rollback` command.\n\nIt is also possible to dry-run the rollback with\
    \ `--dry-run` option:\n\n```\nhelm rollback my-chart 2 --dry-run\n```\n\nRollback\
    \ to starting revision:\n\n```\nhelm rollback my-chart 2\n```\n\nCheck pods:\n\
    \n```\noc get pods\n```\n\nVerify `imagePullPolicy` is rolled back to `Revision`\
    \ 2 containing `IfNotPresent` Policy:\n\n```\noc get deployment my-chart -o yaml\
    \ | grep imagePullPolicy\n```\n\n\n## Uninstall\n\nUninstall will clean everything\
    \ now, there's no further need to delete manually the `Route` like in first chapter,\
    \ since the Helm Chart is now managing that resource:\n\n```\nhelm uninstall my-chart\n\
    ```\n"
  difficulty: basic
  slug: 03-revision
  tabs:
  - hostname: crc-nonest-1
    title: cli
    type: terminal
  - hostname: crc-nonest-1
    port: 30443
    title: web-ui
    type: service
  timelimit: 300
  title: Manage Revisions
  type: challenge
developers:
- btannous@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: openshift
private: false
published: true
skipping_enabled: false
slug: helm
tags:
- openshift
title: Getting Started with Helm 3 on OpenShift
type: track
