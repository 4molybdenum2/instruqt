slug: developing-with-vertx-portfolio-service
id: kyy1dvsfuvvc
type: track
title: 'MicroTrader App Part 2: Portfolio Service'
description: |
  ## Event bus services - Porfolio service

  In this scenario, we are going to implement an event bus service. A `Portfolio` stores the owned shares and the available cash.

  **1. Initialize katacoda environment**

  All the scenarios in this lab are sequential and build on each other. The portfolio microservice being developed in this scenario is dependant on the quote generator microservice that should have been built and running on the OpenShift Container Platform already. That is what the script running in the terminal is doing. It is:
  1. Cloning the source code
  2. Initialize the OpenShift environment
  3. Build and deploy the quote-generator scenario
  4. Build and deploy the micro-trader-dashboard

  **2. Introduction - RPC and Async RPC**

  Microservices are not only about REST. They can be exposed using any types of interactions, and Remote Procedure Calls is one of them. With RPC, a component can effectively send a request to another component by doing a local procedure call, which results in the request being packaged in a message and sent to the callee. Likewise, the result is sent back and returned to the caller component as the result of the procedure call:

  ![Architecture](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-vertx/rpc-sequence.png)

  Such interactions has the advantages to introduce typing, and so is less error-prone than unstructured messages. However, it also introduces a tighter coupling between the caller and the callee. The caller knows how to call the callee:

  1. how the service is called
  2. where the service is living (location)

  ![Architecture](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-vertx/async-rpc-sequence.png)

  The AsyncResult notifies the Handler whether the invocation succeeded or failed. Upon success, the handler can retrieve the result.

  Such async-RPC has several advantages:

  * the caller is not blocked
  * it deals with failures
  * it avoids you to send messages on the event bus and manages object marshalling and unmarshalling for you.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- dahmed@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
private: false
published: true
challenges:
- slug: 01-async-service-interface
  id: akuyyghfeg7d
  type: challenge
  title: Step 1
  notes:
  - type: text
    contents: |
      ## Event bus services - Porfolio service

      In this scenario, we are going to implement an event bus service. A `Portfolio` stores the owned shares and the available cash.

      **1. Initialize katacoda environment**

      All the scenarios in this lab are sequential and build on each other. The portfolio microservice being developed in this scenario is dependant on the quote generator microservice that should have been built and running on the OpenShift Container Platform already. That is what the script running in the terminal is doing. It is:
      1. Cloning the source code
      2. Initialize the OpenShift environment
      3. Build and deploy the quote-generator scenario
      4. Build and deploy the micro-trader-dashboard

      **2. Introduction - RPC and Async RPC**

      Microservices are not only about REST. They can be exposed using any types of interactions, and Remote Procedure Calls is one of them. With RPC, a component can effectively send a request to another component by doing a local procedure call, which results in the request being packaged in a message and sent to the callee. Likewise, the result is sent back and returned to the caller component as the result of the procedure call:

      ![Architecture](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-vertx/rpc-sequence.png)

      Such interactions has the advantages to introduce typing, and so is less error-prone than unstructured messages. However, it also introduces a tighter coupling between the caller and the callee. The caller knows how to call the callee:

      1. how the service is called
      2. where the service is living (location)

      ![Architecture](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-vertx/async-rpc-sequence.png)

      The AsyncResult notifies the Handler whether the invocation succeeded or failed. Upon success, the handler can retrieve the result.

      Such async-RPC has several advantages:

      * the caller is not blocked
      * it deals with failures
      * it avoids you to send messages on the event bus and manages object marshalling and unmarshalling for you.
  assignment: |+
    ## Async service interface

    To create an async RPC service, or event bus service, or service proxies, you first need a Java interface declaring the async methods.

    Open the ``io.vertx.workshop.portfolio.PortfolioService`` class by clicking the link:

    ``portfolio-service/src/main/java/io/vertx/workshop/portfolio/PortfolioService.java``

    The class is annotated with:

    * ``ProxyGen`` - enables the event bus service proxy and server generation

    * ``VertxGen`` - enables the creation of the proxy in the different language supported by Vert.x

    Let’s have a look at the first method:

    ```java
    void getPortfolio(Handler<AsyncResult<Portfolio>> resultHandler);
    ```

    This method lets you retrieve a Portfolio object. This method is asynchronous and so has a Handler parameter receiving an AsyncResult<Portfolio>. The other methods follows the same pattern.

    ***NOTE***
    You may have also noticed that the package has a package-info.java file. This file is required to enable the service proxy generation.

  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 225
- slug: 02-data-objects
  id: hyk6xyhdc7jg
  type: challenge
  title: Step 2
  assignment: |-
    ## Data objects

    The ``Portfolio`` object is a data object. Event bus proxies support a limited set of types, and for non-supported types, it must use data objects (please check the documentation for the whole list of supported types). Data objects are Java classes obeying to a set of constraints:

    * It must be annotated with ``DataObject``

    * It must have an empty constructor, a copy constructor and a constructor taking a ``JsonObject`` as parameter

    * It must have a ``toJson`` method building a ``JsonObject`` representing the current object

    * Fields must be property with (getters and setters)

    Let's open the ``io.vertx.workshop.portfolio.Portfolio.java`` class to see what it looks like:

    ``portfolio-service/src/main/java/io/vertx/workshop/portfolio/Portfolio.java``

    As you can see, all the JSON handling is managed by ``converters`` that are automatically generated, so a data object is very close to a simple bean.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 225
- slug: 03-implement-service
  id: p7jffwxavrs4
  type: challenge
  title: Step 3
  assignment: |-
    ## Implementing the service

    It’s time to implement our async service interface. We are going to implement three methods in this service:

    * `getPortfolio` to understand how to create AsyncResult objects

    * `sendActionOnTheEventBus` to see how to send messages on the event bus

    * `evaluate` computing the current value of the portfolio

    **1. Creating AsyncResult instances**

    As we have seen above, our async service has a `Handler<AsyncResult<Portfolio>>` parameter. So when we implement this service, we would need to call the `Handler` with an instance of `AsyncResult`. To see how this works, let’s implement the `getPortfolio` method:

    In `io.vertx.workshop.portfolio.impl.PortfolioServiceImpl`, fill the `getPortfolio` method. It should call the `handle` method of the `resultHandler` with a successful async result. This object can be created from the (Vert.x) `Future` method.

    Open the file in the editor:

    `portfolio-service/src/main/java/io/vertx/workshop/portfolio/impl/PortfolioServiceImpl.java`

    Then, copy the below content to the matching `// TODO: getPortfolio` statement (or use the `Copy to Editor` button):

    <pre class="file" data-filename="portfolio-service/src/main/java/io/vertx/workshop/portfolio/impl/PortfolioServiceImpl.java" data-target="insert" data-marker="// TODO: getPortfolio">
    resultHandler.handle(Future.succeededFuture(portfolio));
    </pre>

    Let’s dissect it:

    * resultHandler.handle : this invokes the Handler. Handler<X> has a single method (handle(X)).
    * Future.succeededFuture : this is how we create an instance of AsyncResult denoting a success. The passed value is the result (portfolio)

    What is the relationship between `AsyncResult` and `Future`? A `Future` represents the result of an action that may, or may not, have occurred yet. The result may be null if the `Future` is used to detect the completion of an operation. The operation behind a `Future` object may succeed or fail. `AsyncResult` is a structure describing the success of the failure of an operation. So, `Future` are `AsyncResult`. In Vert.x `AsyncResult` instances are created from the `Future` class.

    `AsyncResult` describes:

    * a success as shown before, it encapsulates the result
    * a failure, it encapsulates a `Throwable` instance

    So, how does this work with our async RPC service, let’s look at this sequence diagram:

    ![Architecture](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-vertx/portfolio-sequence.png)

    **2. Sending an event on the event bus**
    It’s time to see how to send messages on the event bus. You access the event bus using vertx.eventBus(). From this object you can:

    * `send` : send a message in point to point mode
    * `publish` : broadcast a message to all consumers registered on the address
    * `send` with a `Handler<AsyncResult<Message>>>`: send a message in point to point mode and expect a reply. If you use RX Java, this method is called `rxSend` and returns a `Single<Message>`. If the receiver does not reply to the message, it is considered a failure (timeout)

    In our code, We have provided the `buy` and `sell` methods, that are just doing some checks before buying or selling shares. Once the action is emitted, we send a message on the event bus that will be consumed by the `Audit Service` and the `Dashboard`. So, we are going to use the `publish` method.

    Write the body of the `sendActionOnTheEventBus` method in order to publish a message on the `EVENT_ADDRESS` address containing a `JsonObject` as body. This object must contains the following entries:
    * action → the action (buy or sell)
    * quote → the quote as Json
    * date → a date (long in milliseconds)
    * amount → the amount
    * owned → the updated (owned) amount

    Copy the following to the matching `// TODO: sendActionOnTheEventBus` statement

    <pre class="file" data-filename="portfolio-service/src/main/java/io/vertx/workshop/portfolio/impl/PortfolioServiceImpl.java" data-target="insert" data-marker="// TODO: sendActionOnTheEventBus">
    vertx.eventBus().publish(EVENT_ADDRESS, new JsonObject()
        .put("action", action)
        .put("quote", quote)
        .put("date", System.currentTimeMillis())
        .put("amount", amount)
        .put("owned", newAmount));
    </pre>

    Let’s have a deeper look:

    * It gets the `EventBus` instance and call `publish` on it. The first parameter is the address on which the message is sent
    * The body is a `JsonObject` containing the different information on the action (buy or sell, the quote (another json object), the date…​

    **3. Coordinating async methods and consuming HTTP endpoints - Portfolio value evaluation**

    The last method to implement is the `evaluate` method. This method computes the current value of the portfolio. However, for this it needs to access the "current" value of the stock (so the last quote). It is going to consume the HTTP endpoint we have implemented in the quote generator. For this, we are going to:

    * Discover the service
    * Call the service for each company we own some shares
    * When all calls are done, compute the value and send it back to the caller

    Let’s do it step by step. First, in the evaluate, we need to retrieve the HTTP endpoint (service) provided by the quote generator. This service is named quotes. We published in in the previous section. So, let’s start to get this service.

    Fill the evaluate method to retrieve the quotes service. You can retrieve Http services using HttpEndpoint.getClient. The name of the service is quotes. If you can’t retrieve the service, just passed a failed async result to the handler. Otherwise, call computeEvaluation.

    Copy the following to the matching `// TODO: evaluate` statement in the evaluate method

    <pre class="file" data-filename="portfolio-service/src/main/java/io/vertx/workshop/portfolio/impl/PortfolioServiceImpl.java" data-target="insert" data-marker="// TODO: evaluate">
    quotes.subscribe((client, err) -> {
     if (err != null) {
         resultHandler.handle(Future.failedFuture(err));
     } else {
         computeEvaluation(client, resultHandler);
     }
    });
    </pre>

    * Get the HTTP Client for the requested service.
    * The client cannot be retrieved (service not found), report the failure
    * We have the client, let’s continue…​

    Here is how the `computeEvaluation` method is implemented:

    ```java
    private void computeEvaluation(HttpClient httpClient, Handler<AsyncResult<Double>> resultHandler) {
        // We need to call the service for each company we own shares
        List<Future> results = portfolio.getShares().entrySet().stream()
            .map(entry -> getValueForCompany(httpClient, entry.getKey(), entry.getValue()))
            .collect(Collectors.toList());


        // We need to return only when we have all results, for this we create a composite future.
        // The set handler is called when all the futures has been assigned.
        CompositeFuture.all(results).setHandler(
          ar -> {
            double sum = results.stream().mapToDouble(fut -> (double) fut.result()).sum();
            resultHandler.handle(Future.succeededFuture(sum));
        });
    }
    ```

    Now, we just need the `getValueForCompany` method that call the service. Write the content of this method.

    This method returns a Single<Double> emitting the numberOfShares * bid result. Write the content of this method following these steps:

    1. use the client.get("/?name=" + encode(company)) to create a HTTP request
    2. we expect a JSON object as response payload, so use .as(BodyCodec.jsonObject())
    3. use the rxSend method to create a Single containing the result
    4. we now need to extract the "bid" from the returned JSON. Extract the response body and then extract the "bid" entry (json.getDouble("bid")). Both extraction are orchestrated using map.
    5. compute the amount (bid * numberOfShared)
    6. Done!

    Copy the following to the matching `// TODO: getValueForCompany` statement in the getValueForCompany method

    <pre class="file" data-filename="portfolio-service/src/main/java/io/vertx/workshop/portfolio/impl/PortfolioServiceImpl.java" data-target="insert" data-marker="// TODO: getValueForCompany">
     return client.get("/?name=" + encode(company))
         .as(BodyCodec.jsonObject())
         .rxSend()
         .map(HttpResponse::body)
         .map(json -> json.getDouble("bid"))
         .map(val -> val * numberOfShares);
    </pre>
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 225
- slug: 04-deploy-to-openshift
  id: cowt8wcyypjo
  type: challenge
  title: Step 4
  assignment: |
    ## Deploy to OpenShift

    Now that you've logged into OpenShift, let's deploy our new micro-trader Vert.x microservice:

    **1. Build and Deploy**

    We have already deployed our `quote-generator` and `micro-trader-dashboard` microservices on OpenShift. In this step we will deploy our new portfolio microservice. We will continue with the same OpenShift project to house this service and other microservices.

    ```
    oc project vertx-kubernetes-workshop
    ```

    As you know, Red Hat OpenShift Application Runtimes include a powerful maven plugin that can take an
    existing Eclipse Vert.x application and generate the necessary Kubernetes configuration.

    Build and deploy the project using the following command, which will use the maven plugin to deploy:

    ```
    cd /root/code/portfolio-service
    ```

    ```
    mvn fabric8:deploy
    ```

    The build and deploy may take a minute or two. Wait for it to complete. You should see a **BUILD SUCCESS** at the
    end of the build output.

    After the maven build finishes it will take less than a minute for the application to become available.
    To verify that everything is started, run the following command and wait for it complete successfully:

    ```
    oc rollout status -w dc/portfolio-service
    ```

    There you go, the portfolio service is started. It discovers the ``quotes`` service and is ready to be used.

    **2. Access the Micro-trader dashboard**

    Click on the "OpenShift Console" tab next to the "Local Web Browser" tab.

    ![OpenShift Console Tab](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-vertx/openshift-console-tab.png)

    Log in using `developer/developer` for username and password. You should see the newly created project called `“vertx-kubernetes-workshop"`. Click on it. You should see four pods running, one each for the quote-generator and micro-trader-dashboard microservices that you created in previous scenarios and a new one for portfolio-service that you created just now.

    Click on the route for the `micro-trader-dashboard`. Append `“/admin”` at the end of the route and you should see the dashboard. You should see some new services and if you click on the “Trader” tab on the left, cash should have been set in the top left corner.

    Alternatively, you can click on the
    [route URL](http://micro-trader-dashboard-vertx-kubernetes-workshop.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/admin)
    to access the dashboard.

    The dashboard is consuming the portfolio service using the async RPC mechanism. A client for JavaScript is generated at compile time, and use SockJS to communicate. Behind the hood there is a bridge between the event bus and SockJS.

    ## Congratulations!

    You have deployed the portfolio microservice running on OpenShift. In the next component, we are going to implement the trader service and use that to buy and sell shares.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 225
checksum: "4276841217295897538"
